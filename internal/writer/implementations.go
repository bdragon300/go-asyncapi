package writer

import (
	"bufio"
	"fmt"
	"github.com/bdragon300/go-asyncapi/internal/common"
	"github.com/bdragon300/go-asyncapi/internal/log"
	"github.com/bdragon300/go-asyncapi/internal/tmpl"
	"github.com/samber/lo"
	"io"
	"io/fs"
	"os"
	"path"
	"strings"

	"github.com/bdragon300/go-asyncapi/implementations"
	"github.com/bdragon300/go-asyncapi/internal/utils"
)

const implementationCodePreamble = "// Code generated by go-asyncapi. DO NOT EDIT."

func WriteImplementation(manifest implementations.ImplManifestItem, protoConf common.ConfigImplementationProtocol, targetDir string) (int, error) {
	logger := log.GetLogger(log.LoggerPrefixWriting)

	dir, err := renderImplementationsInlineTemplate(manifest, protoConf.Directory)
	if err != nil {
		return 0, err
	}
	toDir := path.Clean(path.Join(targetDir, dir))
	pkgName, _ := lo.Coalesce(protoConf.Package, path.Base(toDir))
	logger.Debug("-> Write to", "directory", toDir, "package", pkgName)

	if err := os.MkdirAll(toDir, 0o750); err != nil {
		return 0, fmt.Errorf("create directory %q: %w", toDir, err)
	}

	fromDir, err := fs.Sub(implementations.ImplementationFS, manifest.Dir)
	if err != nil {
		return 0, err
	}

	inPlaceModifyCb := func(entry fs.DirEntry, w io.Writer, r io.Reader) (n int64, err error) {
		rd := bufio.NewReader(r)
		line1, err := rd.ReadString('\n')
		if err != nil {
			return 0, err
		}

		// Write the preamble and overwrite the package name only if it's the first line
		if strings.HasPrefix(line1, "package") && strings.HasSuffix(entry.Name(), ".go") {
			line1 = implementationCodePreamble+"\npackage "+pkgName+"\n"
		}

		if c, err := io.WriteString(w, line1); err == nil {
			n += int64(c)
		} else {
			return n, err
		}

		// Copy the rest of the file
		if c, err := io.Copy(w, rd); err == nil {
			n += c
		} else {
			return n, err
		}
		return n, nil
	}

	return utils.CopyRecursive(fromDir, toDir, inPlaceModifyCb)
}

func renderImplementationsInlineTemplate(manifest implementations.ImplManifestItem, text string) (string, error) {
	ctx := tmpl.ImplementationsTemplateContext{
		Protocol: manifest.Protocol,
		Name:     manifest.Name,
	}
	return renderInlineTemplate(text, ctx)
}