// Code generated by go-asyncapi tool. DO NOT EDIT.

package operations

import (
	"context"
	"github.com/bdragon300/go-asyncapi/run/kafka"
	"site-authorization/asyncapi/channels"
	kafka2 "site-authorization/asyncapi/impl/kafka"
)

func NewAuthRequestOperationKafka(
	params channels.AuthChannelParameters,
	publisher kafka.Publisher,

) *AuthRequestOperationKafka {
	res := AuthRequestOperationKafka{
		Channel: channels.NewAuthChannelKafka(params, publisher, nil),
	}
	return &res
}

func OpenAuthRequestOperationKafka(
	ctx context.Context,
	params channels.AuthChannelParameters,
	server AuthRequestOperationServerKafka,
) (*AuthRequestOperationKafka, error) {
	address, err := channels.AuthChannelAddress(params).Expand()
	if err != nil {
		return nil, err
	}
	var publisher kafka.Publisher
	producer := server.Producer()
	if producer != nil {
		publisher, err = producer.Publisher(ctx, address, nil, nil)
		if err != nil {
			return nil, err
		}
	}

	res := &AuthRequestOperationKafka{
		Channel: channels.NewAuthChannelKafka(params, publisher, nil),
	}
	return res, nil
}

type AuthRequestOperationKafka struct {
	Channel *channels.AuthChannelKafka
}

func (o AuthRequestOperationKafka) Close() error {
	return o.Channel.Close()
}

type AuthRequestOperationEnvelopeMarshalerKafka interface {
	MarshalAuthRequestOperationKafka(envelope kafka.EnvelopeWriter) error
}

func (o AuthRequestOperationKafka) SealAuthRequestMsg(
	envelope kafka.EnvelopeWriter,
	message AuthRequestOperationEnvelopeMarshalerKafka,
) error {
	if err := message.MarshalAuthRequestOperationKafka(envelope); err != nil {
		return err
	}

	envelope.SetTopic(o.Channel.Topic())
	return nil
}

func (o AuthRequestOperationKafka) PublishAuthRequestMsg(
	ctx context.Context,

	message AuthRequestOperationEnvelopeMarshalerKafka,
) error {
	envelope := kafka2.NewEnvelopeOut()
	if err := o.SealAuthRequestMsg(envelope, message); err != nil {
		return err
	}

	return o.Channel.Publish(ctx, envelope)
}

type AuthRequestOperationServerKafka interface {
	OpenAuthRequestOperationKafka(ctx context.Context, params channels.AuthChannelParameters) (*AuthRequestOperationKafka, error)
	Producer() kafka.Producer
}
