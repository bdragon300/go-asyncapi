// Code generated by go-asyncapi tool. DO NOT EDIT.

package operations

import (
	"context"
	"fmt"
	"github.com/bdragon300/go-asyncapi/run/kafka"
	"site-authorization/asyncapi/channels"
	"site-authorization/asyncapi/messages"
)

func NewAuthResponseOperationKafka(
	params channels.AuthChannelParameters,

	subscriber kafka.Subscriber,
) *AuthResponseOperationKafka {
	res := AuthResponseOperationKafka{
		Channel: channels.NewAuthChannelKafka(params, nil, subscriber),
	}
	return &res
}

func OpenAuthResponseOperationKafka(
	ctx context.Context,
	params channels.AuthChannelParameters,
	server AuthResponseOperationServerKafka,
) (*AuthResponseOperationKafka, error) {
	address, err := channels.AuthChannelAddress(params).Expand()
	if err != nil {
		return nil, err
	}
	var subscriber kafka.Subscriber
	consumer := server.Consumer()
	if consumer != nil {
		subscriber, err = consumer.Subscriber(ctx, address, nil, nil)
		if err != nil {
			return nil, err
		}
	}

	res := &AuthResponseOperationKafka{
		Channel: channels.NewAuthChannelKafka(params, nil, subscriber),
	}
	return res, nil
}

type AuthResponseOperationKafka struct {
	Channel *channels.AuthChannelKafka
}

func (o AuthResponseOperationKafka) Close() error {
	return o.Channel.Close()
}

type AuthResponseOperationEnvelopeUnmarshalerKafka interface {
	UnmarshalAuthResponseOperationKafka(envelope kafka.EnvelopeReader) error
}

func (o AuthResponseOperationKafka) UnsealAuthResponseMsg(
	envelope kafka.EnvelopeReader,
	message AuthResponseOperationEnvelopeUnmarshalerKafka,
) error {
	return message.UnmarshalAuthResponseOperationKafka(envelope)
}

func (o AuthResponseOperationKafka) SubscribeAuthResponseMsg(
	ctx context.Context,
	cb func(message messages.AuthResponseMsgSender),
) (err error) {
	subCtx, cancel := context.WithCancelCause(ctx)
	defer cancel(nil)

	return o.Channel.Subscribe(subCtx, func(envelope kafka.EnvelopeReader) {
		message := new(messages.AuthResponseMsgIn)
		if err2 := o.UnsealAuthResponseMsg(envelope, message); err2 != nil {
			err = fmt.Errorf("open message envelope: %w", err2)
			cancel(err)
			return
		}
		cb(message)
	})
}

type AuthResponseOperationServerKafka interface {
	OpenAuthResponseOperationKafka(ctx context.Context, params channels.AuthChannelParameters) (*AuthResponseOperationKafka, error)

	Consumer() kafka.Consumer
}
