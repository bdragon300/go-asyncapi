// Code generated by go-asyncapi tool. DO NOT EDIT.

package messages

import (
	"encoding/json"
	"github.com/bdragon300/go-asyncapi/run"
	"github.com/bdragon300/go-asyncapi/run/kafka"
	"io"
	"site-authorization/asyncapi/schemas"
)

// AuthRequestMsgOut-- (Outbound Message)
type AuthRequestMsgOut struct {
	Payload schemas.AuthEvent
	Headers map[string]any
}

func (m *AuthRequestMsgOut) WithPayload(payload schemas.AuthEvent) *AuthRequestMsgOut {
	m.Payload = payload
	return m
}

func (m *AuthRequestMsgOut) WithHeaders(headers map[string]any) *AuthRequestMsgOut {
	m.Headers = headers
	return m
}
func (m AuthRequestMsgOut) SetCorrelationID(value int) {

	v0 := m.Payload
	v0.ID = value

	m.Payload = v0
}

type AuthRequestMsgSender interface {
	Payload() schemas.AuthEvent
	Headers() map[string]any
	CorrelationID() (value int, err error)
}
type AuthRequestMsgReceiver interface {
	WithPayload(payload schemas.AuthEvent) *AuthRequestMsgOut
	WithHeaders(headers map[string]any) *AuthRequestMsgOut
	SetCorrelationID(value int)
}

// AuthRequestMsgIn-- (Inbound Message)
type AuthRequestMsgIn struct {
	payload schemas.AuthEvent
	headers map[string]any
}

func (m *AuthRequestMsgIn) Payload() schemas.AuthEvent {
	return m.payload
}

func (m *AuthRequestMsgIn) Headers() map[string]any {
	return m.headers
}
func (m AuthRequestMsgIn) CorrelationID() (value int, err error) {

	v0 := m.payload
	v1 := v0.ID
	value = v1
	return
}

func (m *AuthRequestMsgOut) MarshalAuthChannelKafka(envelope kafka.EnvelopeWriter) error {
	return m.MarshalEnvelopeKafka(envelope)
}
func (m *AuthRequestMsgOut) MarshalAuthRequestOperationKafka(envelope kafka.EnvelopeWriter) error {
	return m.MarshalEnvelopeKafka(envelope)
}

func (m *AuthRequestMsgOut) MarshalEnvelopeKafka(envelope kafka.EnvelopeWriter) error {
	if err := m.MarshalKafka(envelope); err != nil {
		return err
	}
	envelope.SetContentType("application/json")
	envelope.SetHeaders(run.Headers(m.Headers))
	return nil
}

func (m *AuthRequestMsgOut) MarshalKafka(w io.Writer) error {

	// Default encoder
	enc := json.NewEncoder(w)
	if err := enc.Encode(m.Payload); err != nil {
		return err
	}
	return nil
}

func (m *AuthRequestMsgIn) UnmarshalAuthChannelKafka(envelope kafka.EnvelopeReader) error {
	return m.UnmarshalEnvelopeKafka(envelope)
}

func (m *AuthRequestMsgIn) UnmarshalEnvelopeKafka(envelope kafka.EnvelopeReader) error {
	if err := m.UnmarshalKafka(envelope); err != nil {
		return err
	}
	m.headers = map[string]any(envelope.Headers())
	return nil
}

func (m *AuthRequestMsgIn) UnmarshalKafka(r io.Reader) error {

	// Default decoder
	dec := json.NewDecoder(r)
	if err := dec.Decode(&m.payload); err != nil {
		return err
	}
	return nil
}
