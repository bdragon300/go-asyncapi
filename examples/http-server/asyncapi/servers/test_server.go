// Code generated by go-asyncapi tool. DO NOT EDIT.

package servers

import (
	"context"
	"errors"
	"github.com/bdragon300/go-asyncapi/run/http"
	"http-server/asyncapi/channels"
	http2 "http-server/asyncapi/impl/http"
	"io"
	"net/url"
)

func TestServerURL() (*url.URL, error) {
	return &url.URL{Scheme: "http", Host: "example.com", Path: ""}, nil
}

func NewTestServer(producer http.Producer, consumer http.Consumer) *TestServer {
	return &TestServer{
		producer: producer,
		consumer: consumer,
	}
}

type TestServerClosable struct {
	TestServer
}

func (c TestServerClosable) Close() error {
	var err error
	if v, ok := any(c.producer).(io.Closer); ok {
		err = errors.Join(err, v.Close())
	}
	if v, ok := any(c.consumer).(io.Closer); ok {
		err = errors.Join(err, v.Close())
	}
	return err
}

func ConnectTestServerBidi(ctx context.Context, url *url.URL) (*TestServerClosable, error) {
	var bindings *http.ServerBindings
	producer := http2.NewProducer(url, bindings)
	consumer := http2.NewConsumer(bindings)
	return &TestServerClosable{
		TestServer{producer: producer, consumer: consumer},
	}, nil
}

func ConnectTestServerProducer(ctx context.Context, url *url.URL) (*TestServerClosable, error) {
	var bindings *http.ServerBindings
	producer := http2.NewProducer(url, bindings)
	return &TestServerClosable{
		TestServer{producer: producer},
	}, nil
}

func ConnectTestServerConsumer(ctx context.Context, url *url.URL) (*TestServerClosable, error) {
	var bindings *http.ServerBindings
	consumer := http2.NewConsumer(bindings)
	return &TestServerClosable{
		TestServer{consumer: consumer},
	}, nil
}

// TestServer--Test HTTP server
type TestServer struct {
	producer http.Producer
	consumer http.Consumer
}

func (s TestServer) Name() string {
	return "TestServer"
}

func (s TestServer) Producer() http.Producer {
	return s.producer
}

func (s TestServer) Consumer() http.Consumer {
	return s.consumer
}

func (s TestServer) OpenEchoChannelHTTP(
	ctx context.Context,

) (*channels.EchoChannelHTTP, error) {
	return channels.OpenEchoChannelHTTP(
		ctx, s,
	)
}
