// Code generated by go-asyncapi tool. DO NOT EDIT.

package messages

import (
	"encoding/json"
	"github.com/bdragon300/go-asyncapi/run"
	"github.com/bdragon300/go-asyncapi/run/http"
	"http-server/asyncapi/schemas"
	"io"
)

// ServerRequestOut-- (Outbound Message)
type ServerRequestOut struct {
	Payload schemas.EchoRequest
	Headers map[string]any
}

func (m *ServerRequestOut) WithPayload(payload schemas.EchoRequest) *ServerRequestOut {
	m.Payload = payload
	return m
}

func (m *ServerRequestOut) WithHeaders(headers map[string]any) *ServerRequestOut {
	m.Headers = headers
	return m
}

type ServerRequestSender interface {
	Payload() schemas.EchoRequest
	Headers() map[string]any
}
type ServerRequestReceiver interface {
	WithPayload(payload schemas.EchoRequest) *ServerRequestOut
	WithHeaders(headers map[string]any) *ServerRequestOut
}

// ServerRequestIn-- (Inbound Message)
type ServerRequestIn struct {
	payload schemas.EchoRequest
	headers map[string]any
}

func (m *ServerRequestIn) Payload() schemas.EchoRequest {
	return m.payload
}

func (m *ServerRequestIn) Headers() map[string]any {
	return m.headers
}

func (m *ServerRequestOut) MarshalEchoChannelHTTP(envelope http.EnvelopeWriter) error {
	return m.MarshalEnvelopeHTTP(envelope)
}

func (m *ServerRequestOut) MarshalEnvelopeHTTP(envelope http.EnvelopeWriter) error {
	if err := m.MarshalHTTP(envelope); err != nil {
		return err
	}
	envelope.SetContentType("application/json")
	envelope.SetHeaders(run.Headers(m.Headers))
	return nil
}

func (m *ServerRequestOut) MarshalHTTP(w io.Writer) error {

	// Default encoder
	enc := json.NewEncoder(w)
	if err := enc.Encode(m.Payload); err != nil {
		return err
	}
	return nil
}

func (m *ServerRequestIn) UnmarshalEchoChannelHTTP(envelope http.EnvelopeReader) error {
	return m.UnmarshalEnvelopeHTTP(envelope)
}

func (m *ServerRequestIn) UnmarshalEnvelopeHTTP(envelope http.EnvelopeReader) error {
	if err := m.UnmarshalHTTP(envelope); err != nil {
		return err
	}
	m.headers = map[string]any(envelope.Headers())
	return nil
}

func (m *ServerRequestIn) UnmarshalHTTP(r io.Reader) error {

	// Default decoder
	dec := json.NewDecoder(r)
	if err := dec.Decode(&m.payload); err != nil {
		return err
	}
	return nil
}
