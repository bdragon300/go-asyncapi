import (
	"bufio"
	"context"
	runTCP "github.com/bdragon300/go-asyncapi/run/tcp"
	"net"
)

// NewProducer creates a new TCP producer to connect to the specified address and network. If network is empty,
// the default "tcp" will be used.
//
// The third parameter localAddress sets the local address to bind to.
// If empty, the bound address will be selected automatically by the system.
func NewProducer(address, network, localAddress string) (*ProduceClient, error) {
	if network == "" {
		network = "tcp"
	}
	d := net.Dialer{}
	if localAddress != "" {
		la, err := net.ResolveTCPAddr(network, localAddress)
		if err != nil {
			return nil, err
		}
		d.LocalAddr = la
	}

	return &ProduceClient{
		Dialer:          d,
		Scanner:         bufio.NewScanner(nil),
		MaxEnvelopeSize: DefaultMaxEnvelopeSize,
		address:         address,
		protocolFamily:  network,
	}, nil
}

type ProduceClient struct {
	net.Dialer
	// Scanner splits the incoming data into Envelopes. If equal to nil, the data is
	// split on chunks of MaxEnvelopeSize bytes, which is equal to bufio.MaxScanTokenSize by default.
	Scanner         *bufio.Scanner
	MaxEnvelopeSize int

	address        string
	protocolFamily string
}

func (p ProduceClient) Publisher(ctx context.Context, _ string, _ *runTCP.ChannelBindings, _*runTCP.OperationBindings) (runTCP.Publisher, error) {
	conn, err := p.DialContext(ctx, p.protocolFamily, p.address)
	if err != nil {
		return nil, err
	}

	return NewChannel(conn.(*net.TCPConn), p.Scanner, p.MaxEnvelopeSize), nil
}
