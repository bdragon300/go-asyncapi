import (
	"bufio"
	"context"
	"fmt"
	"github.com/bdragon300/go-asyncapi/run"
	"net"
	"sync"

	runTCP "github.com/bdragon300/go-asyncapi/run/tcp"
)

type subscriberFunc func(envelope runTCP.EnvelopeReader)

func NewChannel(conn *net.TCPConn, scanner *bufio.Scanner, maxEnvelopeSize int) *Channel {
	res := Channel{
		TCPConn:         conn,
		scanner:         scanner,
		maxEnvelopeSize: maxEnvelopeSize,
		callbacks:       run.NewRing[subscriberFunc](),
		once:            &sync.Once{},
	}
	res.ctx, res.cancel = context.WithCancelCause(context.Background())
	return &res
}

type Channel struct {
	*net.TCPConn
	scanner         *bufio.Scanner
	maxEnvelopeSize int
	callbacks       *run.Ring[subscriberFunc]
	ctx             context.Context
	cancel          context.CancelCauseFunc
	once            *sync.Once
}

type ImplementationRecord interface {
	Bytes() []byte
}

func (c *Channel) Send(_ context.Context, envelopes ...runTCP.EnvelopeWriter) error {
	for _, envelope := range envelopes {
		ir := envelope.(ImplementationRecord)
		if _, err := c.TCPConn.Write(ir.Bytes()); err != nil {
			return err
		}
	}
	return nil
}

func (c *Channel) Receive(ctx context.Context, cb func(envelope runTCP.EnvelopeReader)) error {
	element := c.callbacks.Append(cb)
	defer func() {
		c.callbacks.Remove(element)
	}()
	c.once.Do(func() {
		go c.readConn()
	})

	select {
	case <-ctx.Done():
		return ctx.Err()
	case <-c.ctx.Done():
		return context.Cause(c.ctx)
	}
}

func (c *Channel) Close() error {
	c.cancel(nil)
	return c.TCPConn.Close()
}

func (c *Channel) readConn() {
	var err error
	defer func() {
		c.cancel(err)
	}()

	for {
		// TODO: oob
		buf := make([]byte, c.maxEnvelopeSize) // TODO: sync.Pool
		var b []byte
		switch {
		case c.scanner != nil:
			c.scanner.Buffer(buf, c.maxEnvelopeSize)
			if !c.scanner.Scan() {
				err = c.scanner.Err()
				return
			}
			b = c.scanner.Bytes()
		default:
			var n int
			if n, err = c.TCPConn.Read(buf); err != nil {
				return
			}
			b = buf[:n]
		}

		cb, ok := c.callbacks.Next()
		if !ok {
			err = fmt.Errorf("no subscribers for connection %s->%s", c.TCPConn.RemoteAddr(), c.TCPConn.LocalAddr())
			return
		}
		cb(NewEnvelopeIn(b))
	}
}
