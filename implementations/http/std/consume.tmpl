import (
	"context"
	"github.com/bdragon300/go-asyncapi/run"
	runHttp "github.com/bdragon300/go-asyncapi/run/http"
	"net/http"
	"strings"
	"sync"
)

func NewConsumer(bindings *runHttp.ServerBindings) *ConsumeClient {
	return &ConsumeClient{
		bindings:    bindings,
		mu:          &sync.RWMutex{},
		subscribers: make(map[string]*run.Ring[subscriberFunc]),
	}
}

type subscriberFunc func(envelope runHttp.EnvelopeReader)

type ConsumeClient struct {
	http.ServeMux
	bindings    *runHttp.ServerBindings
	mu          *sync.RWMutex
	// subscribers are callbacks list by channel name.
	subscribers map[string]*run.Ring[subscriberFunc]
}

func (c *ConsumeClient) Subscriber(_ context.Context, address string, chb *runHttp.ChannelBindings, opb *runHttp.OperationBindings) (runHttp.Subscriber, error) {
	c.mu.Lock()
	defer c.mu.Unlock()

	c.ensureChannel(address, opb)
	subscriber := &Subscriber{
		channelBindings:   chb,
		operationBindings: opb,
		callbacks:         c.subscribers[address],
	}

	return subscriber, nil
}

func (c *ConsumeClient) ensureChannel(channelName string, opb *runHttp.OperationBindings) {
	if _, ok := c.subscribers[channelName]; !ok {
		c.subscribers[channelName] = run.NewRing[subscriberFunc]()
		c.HandleFunc(channelName, func(w http.ResponseWriter, req *http.Request) {
			if opb != nil {
				needMethod := opb.Method
				if needMethod != "" && strings.ToUpper(needMethod) != req.Method {
					http.Error(w, "method not allowed", http.StatusMethodNotAllowed)
					return
				}
			}

			c.mu.RLock()
			defer c.mu.RUnlock()
			if _, ok := c.subscribers[channelName]; !ok {
				http.Error(w, "channel not found", http.StatusNotFound)
				return
			}
			cb, ok := c.subscribers[channelName].Next()
			if !ok {
				http.Error(w, "no subscribers", http.StatusServiceUnavailable)
				return
			}
			cb(NewEnvelopeIn(req, w))
		})
	}
}
