import (
	"context"
	runMqtt "github.com/bdragon300/go-asyncapi/run/mqtt"
	mqtt "github.com/eclipse/paho.mqtt.golang"
)

type SubscribeChannel struct {
	Client mqtt.Client
	Topic  string

	channelBindings *runMqtt.ChannelBindings
	operationBindings *runMqtt.OperationBindings
	envelopes         chan runMqtt.EnvelopeReader
	ctx           context.Context
	cancel        context.CancelFunc
}

func (r *SubscribeChannel) Receive(ctx context.Context, cb func(envelope runMqtt.EnvelopeReader)) error {
	for {
		select {
		case v, ok := <-r.envelopes:
			if !ok {
				return context.Canceled // channel closed
			}
			cb(v)
		case <-ctx.Done():
			return ctx.Err()
		case <-r.ctx.Done():
			return r.ctx.Err()
		}
	}
}

func (r *SubscribeChannel) Close() error {
	r.cancel()
	if tok := r.Client.Unsubscribe(r.Topic); tok.Wait() && tok.Error() != nil {
		return tok.Error()
	}
	return nil
}
