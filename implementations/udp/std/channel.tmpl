import (
	"context"
	"net"
	"sync"

	runUDP "github.com/bdragon300/go-asyncapi/run/udp"
)

func NewChannel(conn *net.UDPConn, bufferSize int, defaultRemoteAddress net.Addr) *Channel {
	res := Channel{
		UDPConn:              conn,
		defaultRemoteAddress: defaultRemoteAddress,
		bufferSize:           bufferSize,
		envelopes:            make(chan runUDP.EnvelopeReader),
		once:                 &sync.Once{},
	}
	res.ctx, res.cancel = context.WithCancelCause(context.Background())
	return &res
}

type Channel struct {
	*net.UDPConn

	defaultRemoteAddress net.Addr
	bufferSize int
	envelopes  chan runUDP.EnvelopeReader
	ctx        context.Context
	cancel               context.CancelCauseFunc
	once 			     *sync.Once
}

type ImplementationRecord interface {
	Bytes() []byte
	RemoteAddr() net.Addr
}

func (c *Channel) Send(_ context.Context, envelopes ...runUDP.EnvelopeWriter) error {
	for _, envelope := range envelopes {
		ir := envelope.(ImplementationRecord)
		addr := ir.RemoteAddr()
		if addr == nil {
			addr = c.defaultRemoteAddress
		}
		if _, err := c.UDPConn.WriteTo(ir.Bytes(), addr); err != nil {
			return err
		}
	}
	return nil
}

func (c *Channel) Receive(ctx context.Context, cb func(envelope runUDP.EnvelopeReader)) error {
	c.once.Do(func() {
		go c.listen()
	})

	for {
		select {
		case v, ok := <-c.envelopes:
			if !ok {
				return context.Canceled // channel has been closed
			}
			cb(v)
		case <-ctx.Done():
			return ctx.Err()
		case <-c.ctx.Done():
			return context.Cause(c.ctx)
		}
	}
}

func (c *Channel) Close() error {
	c.cancel(nil)
	return c.UDPConn.Close()
}

func (c *Channel) listen() {
	var err error
	defer func() {
		c.cancel(err)
	}()

	var n int
	var addr net.Addr
	for {
		buf := make([]byte, c.bufferSize) // TODO: sync.Pool
		if n, addr, err = c.UDPConn.ReadFrom(buf); err != nil {
			return
		}
		select {
		case <-c.ctx.Done():
			return
		case c.envelopes <- NewEnvelopeIn(buf[:n], addr):
		}
	}
}
