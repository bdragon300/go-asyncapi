import (
	"context"
	"fmt"
	"github.com/bdragon300/go-asyncapi/run"
	"net"
	"sync"

	runUDP "github.com/bdragon300/go-asyncapi/run/udp"
)

func NewChannel(conn *net.UDPConn, bufferSize int, defaultRemoteAddress net.Addr) *Channel {
	res := Channel{
		UDPConn:              conn,
		defaultRemoteAddress: defaultRemoteAddress,
		bufferSize:           bufferSize,
		callbacks:            run.NewRing[subscriberFunc](),
		once:                 &sync.Once{},
	}
	res.ctx, res.cancel = context.WithCancelCause(context.Background())
	return &res
}

type subscriberFunc func(envelope runUDP.EnvelopeReader)

type Channel struct {
	*net.UDPConn

	defaultRemoteAddress net.Addr
	bufferSize           int
	callbacks            *run.Ring[subscriberFunc]
	ctx                  context.Context
	cancel               context.CancelCauseFunc
	once                 *sync.Once
}

type ImplementationRecord interface {
	Bytes() []byte
	RemoteAddr() net.Addr
}

func (c *Channel) Send(_ context.Context, envelopes ...runUDP.EnvelopeWriter) error {
	for _, envelope := range envelopes {
		ir := envelope.(ImplementationRecord)
		addr := ir.RemoteAddr()
		if addr == nil {
			addr = c.defaultRemoteAddress
		}
		if _, err := c.UDPConn.WriteTo(ir.Bytes(), addr); err != nil {
			return err
		}
	}
	return nil
}

func (c *Channel) Receive(ctx context.Context, cb func(envelope runUDP.EnvelopeReader)) error {
	element := c.callbacks.Append(cb)
	defer func() {
		c.callbacks.Remove(element)
	}()
	c.once.Do(func() {
		go c.readConn()
	})

	select {
	case <-ctx.Done():
		return ctx.Err()
	case <-c.ctx.Done():
		return context.Cause(c.ctx)
	}
}

func (c *Channel) Close() error {
	c.cancel(nil)
	return c.UDPConn.Close()
}

func (c *Channel) readConn() {
	var err error
	defer func() {
		c.cancel(err)
	}()

	var n int
	var addr net.Addr
	for {
		buf := make([]byte, c.bufferSize) // TODO: sync.Pool
		if n, addr, err = c.UDPConn.ReadFrom(buf); err != nil {
			return
		}

		cb, ok := c.callbacks.Next()
		if !ok {
			err = fmt.Errorf("no subscribers for connection %s->%s", c.UDPConn.RemoteAddr(), c.UDPConn.LocalAddr())
			return
		}
		cb(NewEnvelopeIn(buf[:n], addr))
	}
}
