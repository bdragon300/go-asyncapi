import (
	"context"
	"fmt"
	runUDP "github.com/bdragon300/go-asyncapi/run/udp"
	"net"
)

const DefaultMaxEnvelopeSize = 1024

// NewClient creates a new UDP client. The protocolFamily argument specifies the protocol family to use, such as "udp" or "udp4".
// If empty, it is set to "udp".
//
// For sending the data, the localAddress arg sets the source address of the outgoing UDP packets. If empty, the system
// will choose it automatically.
// The defaultRemoteAddress arg is used for the destination address of UDP packets if the caller does not specify a
// remote address in the envelope.
//
// For receiving the data, the localAddress arg sets the address to listen for incoming UDP packets.
// The defaultRemoteAddress arg is ignored.
func NewClient(localAddress, defaultRemoteAddress, protocolFamily string) *Client {
	if protocolFamily == "" {
		protocolFamily = "udp"
	}
	return &Client{
		LocalAddress:         localAddress,
		DefaultRemoteAddress: defaultRemoteAddress,
		MaxEnvelopeSize:      DefaultMaxEnvelopeSize,
		protocolFamily:       protocolFamily,
	}
}

type Client struct {
	Config               net.ListenConfig

	// LocalAddress is the local address that will be used to listen for incoming UDP packets.
	LocalAddress         string

	// DefaultRemoteAddress is the remote address that will be used if it not set in the envelope.
	DefaultRemoteAddress string

	// MaxEnvelopeSize is the maximum size of received envelopes. It should be set to the maximum
	// expected size of the UDP datagram that can be received. If the size of the received datagram
	// exceeds this value, the datagram will be truncated and the rest of the data will be lost. By default, it is 1024.
	MaxEnvelopeSize int

	protocolFamily string
}

func (c Client) Publisher(ctx context.Context, _ string, _ *runUDP.ChannelBindings, _ *runUDP.OperationBindings) (runUDP.Publisher, error) {
	return c.channel(ctx)
}

func (c Client) Subscriber(ctx context.Context, _ string, _ *runUDP.ChannelBindings, _ *runUDP.OperationBindings) (runUDP.Subscriber, error) {
	return c.channel(ctx)
}

func (c *Client) channel(ctx context.Context) (*Channel, error) {
	conn, err := c.Config.ListenPacket(ctx, c.protocolFamily, c.LocalAddress)
	if err != nil {
		return nil, err
	}

	addr, err := net.ResolveUDPAddr(c.protocolFamily, c.DefaultRemoteAddress)
	if err != nil {
		return nil, fmt.Errorf("resolve remote address: %w", err)
	}

	return NewChannel(conn.(*net.UDPConn), c.MaxEnvelopeSize, addr), nil
}
