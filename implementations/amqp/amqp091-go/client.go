package amqp091go

import (
	"context"
	"errors"
	"fmt"

	"github.com/bdragon300/go-asyncapi/run"
	runAmqp "github.com/bdragon300/go-asyncapi/run/amqp"
	"github.com/rabbitmq/amqp091-go"
)

func NewClient(serverURL string, bindings *runAmqp.ServerBindings) (*Client, error) {
	conn, err := amqp091.Dial(serverURL)
	if err != nil {
		return nil, err
	}
	return &Client{
		Connection: conn,
		bindings:   bindings,
	}, nil
}

type Client struct {
	*amqp091.Connection
	bindings *runAmqp.ServerBindings
}

func (c Client) Publisher(_ context.Context, _ string, bindings *runAmqp.ChannelBindings) (runAmqp.Publisher, error) {
	ch, err := c.Channel()
	if err != nil {
		return nil, err
	}

	var exchangeName string // By default, publish to the default exchange with empty name
	if bindings != nil {
		ec := bindings.ExchangeConfiguration
		if ec.Name != nil {
			exchangeName = *ec.Name
		}
		declare := ec.Type != "" || ec.Durable != nil || ec.AutoDelete != nil || ec.VHost != ""
		if declare {
			err = ch.ExchangeDeclare(
				exchangeName,
				string(ec.Type),
				run.DerefOrZero(ec.Durable),
				run.DerefOrZero(ec.AutoDelete),
				false,
				false,
				nil,
			)
			if err != nil {
				err = errors.Join(err, ch.Close())
				return nil, fmt.Errorf("exchange declare: %w", err)
			}
		}
	}
	return &PublishChannel{
		Channel:      ch,
		exchangeName: exchangeName,
		bindings:     bindings,
	}, nil
}

func (c Client) Subscriber(_ context.Context, address string, bindings *runAmqp.ChannelBindings) (runAmqp.Subscriber, error) {
	ch, err := c.Channel()
	if err != nil {
		return nil, err
	}

	// According to AsyncAPI 2.6.x spec, by default the queue.is=="routingKey".
	// If queue.is=="routingKey", the routingKey==address, the queueName==bindings.QueueConfiguration.Name or autogenerated.
	// If queue.is=="queue", the routingKey== "#"; the queueName==bindings.QueueConfiguration.Name or address.
	var queueName, exchangeName string
	routingKey := address
	if bindings != nil {
		if bindings.ChannelType == runAmqp.ChannelTypeQueue {
			queueName = address
			routingKey = "#" // Receive all messages
		}
		qc := bindings.QueueConfiguration
		if qc.Name != "" {
			queueName = qc.Name
		}
		declare := qc.Durable != nil || qc.Exclusive != nil || qc.AutoDelete != nil || qc.VHost != ""
		if declare {
			_, err = ch.QueueDeclare(
				queueName,
				run.DerefOrZero(qc.Durable),
				run.DerefOrZero(qc.AutoDelete),
				run.DerefOrZero(qc.Exclusive),
				false,
				nil,
			)
			if err != nil {
				return nil, errors.Join(fmt.Errorf("queue declare: %w", err), ch.Close())
			}
		}
		exchangeName = run.DerefOrZero(bindings.ExchangeConfiguration.Name)
	}
	// TODO: binding key in x- schema argument
	if err = ch.QueueBind(queueName, routingKey, exchangeName, false, nil); err != nil {
		return nil, errors.Join(fmt.Errorf("queue bind: %w", err), ch.Close())
	}

	return &SubscribeChannel{
		Channel:   ch,
		queueName: queueName,
		bindings:  bindings,
	}, nil
}
