{{define "clientApp/channel"}}
{{/* dot == common.Renderable: Ref -> render.Channel or render.Channel */}}
{{- with . | deref}}
type {{$ | goIDUpper}}Cmd struct {
    // Parameters
    {{- range .Parameters}}
	    {{. | goIDUpper}} string `arg:"--{{.Name | toQuotable | toKebabCase}},required" help:"Channel parameter: {{.Name | toQuotable}}"`
    {{- end}}

	// Servers
    {{- range .BoundServers}}
	    {{. | goIDUpper}}Cmd *{{. | goIDUpper}}CliCmd `arg:"subcommand:{{.Name | toQuotable | toKebabCase}}" help:"Server: {{.Name | toQuotable}}"`
    {{- end}}
}

func channel{{$ | goIDUpper}}(ctx {{"context.Context"}}, args *{{$ | goIDUpper}}Cmd, opts channelOptions) error {
    {{- if .ParametersType}}
        channelParams := {{goUsage .ParametersType}}{
            {{- range .Parameters}}
                {{. | goIDUpper}}: {{goUsage (deref .).Type}}(args.{{. | goIDUpper}}),
            {{- end}}
        }
	    {{goQual "log/slog.Debug"}}("Channel parameters", "value", channelParams)
    {{- end}}

	switch {
    {{- range .BoundServers}}
        {{$implTemplateCtx := dict "ChannelOrOperation" $ "Server" . "Kind" "channel"}}
        case args.{{. | goIDUpper}}Cmd != nil:
            {{template "clientApp/pubsub/proto/serverPubSub" $implTemplateCtx}}
    {{- end}}
	default:
		showCliError("No server selected. Append --help for more information", opts.cliParser)
	}

	return nil
}
{{- end}}
{{- end}}

{{define "clientApp/operation"}}
{{/* dot == common.Renderable: Ref -> render.Operation or render.Operation */}}
{{- with . | deref}}
type {{$ | goIDUpper}}Cmd struct {
    // Parameters
    {{- range .Channel.Parameters}}
	    {{. | goIDUpper}} string `arg:"--{{.Name | toQuotable | toKebabCase}},required" help:"Channel parameter: {{.Name | toQuotable}}"`
    {{- end}}

	// Servers
    {{- range .Channel.BoundServers}}
	    {{. | goIDUpper}}Cmd *{{. | goIDUpper}}CliCmd `arg:"subcommand:{{.Name | toQuotable | toKebabCase}}" help:"Server: {{.Name | toQuotable}}"`
    {{- end}}
}

func operation{{$ | goIDUpper}}(ctx {{"context.Context"}}, args *{{$ | goIDUpper}}Cmd, opts channelOptions) error {
    {{- if .Channel.ParametersType}}
        channelParams := {{goUsage .Channel.ParametersType}}{
            {{- range .Channel.Parameters}}
                {{. | goIDUpper}}: {{goUsage (deref .).Type}}(args.{{. | goIDUpper}}),
            {{- end}}
        }
	    {{goQual "log/slog.Debug"}}("Channel parameters", "value", channelParams)
    {{- end}}

	switch {
    {{- range .Channel.BoundServers}}
        {{$implTemplateCtx := dict "ChannelOrOperation" $ "Server" . "Kind" "operation"}}
        case args.{{. | goIDUpper}}Cmd != nil:
            {{template "clientApp/pubsub/proto/serverPubSub" $implTemplateCtx}}
    {{- end}}
	default:
		showCliError("No server selected. Append --help for more information", opts.cliParser)
	}

	return nil
}
{{- end}}
{{- end}}

{{define "clientApp/pubsub/proto/serverPubSub"}}
{{- /*
    .ChannelOrOperation == common.Renderable: Ref -> render.Channel or render.Channel or render.Operation or render.Operation;
    .Server == common.Renderable: Ref -> render.Server or render.Server
    .Kind == "channel" or "operation"
    */}}
{{$channel := .ChannelOrOperation}}
{{- if eq .ChannelOrOperation.Kind "operation"}}
    {{$channel = .ChannelOrOperation.Channel}}
{{- end}}

{{- with $server := .Server | deref}}
serverURL := args.{{$.Server | goIDUpper}}Cmd.URL
if serverURL == nil {
    u, err := {{goPkg .ProtoServer.Type}}{{. | goIDUpper}}URL(
        {{range .Variables.Entries}}args.{{$server | goIDUpper}}Cmd.{{.Value | goIDUpper}},{{end}}
    )
    if err != nil {
        return {{goQual "fmt.Errorf"}}("url: %w", err)
    }
    serverURL = u
}
if opts.proxyHost != "" {
    if port := serverURL.Port(); port != "" {
        serverURL.Host = {{goQual "net.JoinHostPort"}}(opts.proxyHost, port)
    } else {
        serverURL.Host = opts.proxyHost
    }
}
{{goQual "log/slog.Debug"}}("Server URL", "value", serverURL)

{{- with impl .Protocol}}
    {{goQual "log/slog.Debug"}}("Using implementation {{.Manifest.Name | toQuotable}}")
    {{- with tryTmpl (print "clientApp/channeloperation/" $server.Protocol "/" .Manifest.Name "/setup") $}}
        // Implementation-specific code
        {{.}}
        // End of implementation-specific code
    {{- end}}
{{end}}

{{goQual "log/slog.Debug"}}("Connecting to server", "name", {{$.Server.Name | goLit}}, "url", serverURL)
if opts.publish {
    {{- if and .IsPublisher (deref $.ChannelOrOperation).IsPublisher}}
        {{- with impl .Protocol}}
            {{- with tryTmpl (print "clientApp/channeloperation/" $server.Protocol "/" .Manifest.Name "/producer/connect") $}}
                // Implementation-specific code
                {{.}}
                // End of implementation-specific code
            {{- else}}
                server, err := {{goPkg (deref $.Server).ProtoServer.Type}}Connect{{$.Server | goIDUpper}}Producer(ctx, serverURL)
                if err != nil {
                    return {{goQual "fmt.Errorf"}}("connect server %s: %w", serverURL, err)
                }
            {{- end}}
        {{end}}
        defer server.Close()

        {{goQual "log/slog.Debug"}}("Opening {{$.Kind}}", "name", {{.Name | goLit}}{{with (deref $channel).ParametersType}}, "parameters", channelParams{{end}})
        object, err := server.Open{{$.ChannelOrOperation | goIDUpper}}{{.Protocol | goIDUpper}}(ctx{{with (deref $channel).ParametersType}}, channelParams{{end}})
        if err != nil {
            return {{goQual "fmt.Errorf"}}("open {{$.Kind}}: %w", err)
        }
        defer object.Close()

        {{goQual "log/slog.Debug"}}("Reading data to publish to {{$.Kind}}...")
        // If separator is empty, then don't use scanner and just read everything until EOF
        for b := range readStreamWithContext(ctx, opts.stream, opts.payloadSeparator) {
            {{with impl .Protocol}}envelope := {{goPkg .}}NewEnvelopeOut(){{end}}
            n, err := envelope.Write(b)
            if err != nil {
                return {{goQual "fmt.Errorf"}}("write envelope: %w", err)
            }
            {{goQual "log/slog.Debug"}}("Read message payload", "bytes", n)
            parsedHeaders := parseHeaders(opts.publishHeaders)
            envelope.SetHeaders(parsedHeaders)

            {{- with impl .Protocol}}
                {{- with tryTmpl (print "clientApp/message/" $server.Protocol "/" .Manifest.Name "/publish") $}}
                    // Implementation-specific code
                    {{.}}
                    // End of implementation-specific code
                {{- end}}
            {{end}}

            if opts.debug {
                {{goQual "log/slog.Debug"}}("Publishing message", "bytes", n, "payload", cutPayload(b, MaxLogPayloadSize), "headers", parsedHeaders)
            }
            if err := object{{if eq $.ChannelOrOperation.Kind "operation"}}.Channel{{end}}.Publish(ctx, envelope); err != nil {
                return {{goQual "fmt.Errorf"}}("publish: %w", err)
            }
            if !opts.multipleMessages {
                break
            }
        }
    {{- else}}
        return {{goQual "fmt.Errorf"}}("publishing for {{$.Kind}} {{.Name | toQuotable}} is not supported in specification or disabled")
    {{- end}}
} else {
    {{- if and .IsSubscriber  (deref $.ChannelOrOperation).IsSubscriber}}
        {{- with impl .Protocol}}
            {{- with tryTmpl (print "clientApp/channeloperation/" $server.Protocol "/" .Manifest.Name "/consumer/connect") $}}
                // Implementation-specific code
                {{.}}
                // End of implementation-specific code
            {{- else}}
                server, err := {{goPkg ($.Server | deref).ProtoServer.Type}}Connect{{$.Server | goIDUpper}}Consumer(ctx, serverURL)
                if err != nil {
                    return {{goQual "fmt.Errorf"}}("connect server %s: %w", serverURL, err)
                }
            {{- end}}
        {{end}}
        defer server.Close()

        {{goQual "log/slog.Debug"}}("Opening {{$.Kind}}", "name", {{.Name | goLit}}{{with (deref $channel).ParametersType}}, "parameters", channelParams{{end}})
        object, err := server.Open{{$.ChannelOrOperation | goIDUpper}}{{.Protocol | goIDUpper}}(ctx{{with (deref $channel).ParametersType}}, channelParams{{end}})
        if err != nil {
            return {{goQual "fmt.Errorf"}}("open {{$.Kind}}: %w", err)
        }
        defer object.Close()

        {{goQual "log/slog.Debug"}}("Subscribing to {{$.Kind}}...", "separator", opts.payloadSeparator)
        subCtx, cancel := {{goQual "context.WithCancelCause"}}(ctx)
        defer cancel(nil)
        payloadSeparator := []byte(opts.payloadSeparator)
        err = object{{if eq $.ChannelOrOperation.Kind "operation"}}.Channel{{end}}.Subscribe(subCtx, func(e {{goQualR .Protocol "EnvelopeReader"}}) {
            b, err := {{goQual "io.ReadAll"}}(e)
            if err != nil {
                cancel({{goQual "fmt.Errorf"}}("read: %w", err))
                return
            }
            if opts.debug {
                var p string
                if len(b) > MaxLogPayloadSize {
                    p = {{goQual "strings.ToValidUTF8"}}(string(b[:MaxLogPayloadSize]), "") + "..."
                } else {
                    p = {{goQual "strings.ToValidUTF8"}}(string(b), "")
                }
                {{goQual "log/slog.Debug"}}("Received message", "bytes", len(b), "payload", p, "headers", e.Headers())
            }
            if _, err = opts.stream.Write(b); err != nil {
                cancel({{goQual "fmt.Errorf"}}("write stream: %w", err))
                return
            }
            if _, err = opts.stream.Write(payloadSeparator); err != nil {
                cancel({{goQual "fmt.Errorf"}}("write stream: %w", err))
                return
            }
            if !opts.multipleMessages {
                cancel(nil)
            }
        })
        if err != nil {
            return {{goQual "fmt.Errorf"}}("subscribe: %w", err)
        }
        if err := subCtx.Err(); err != nil {
            return {{goQual "fmt.Errorf"}}("message processing: %w", err)
        }
    {{- else}}
        return {{goQual "fmt.Errorf"}}("subscribing for {{$.Kind}} {{.Name | toQuotable}} is not supported in specification or disabled")
    {{- end}}
}
{{- end}}
{{- end}}