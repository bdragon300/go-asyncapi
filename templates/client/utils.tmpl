func readStreamWithContext(ctx {{goQual "context.Context"}}, input {{goQual "io.Reader"}}, payloadSeparator string) <-chan []byte {
	done := make(chan struct{})
	ch := make(chan []byte)
	buf := make([]byte, InputStreamBufferSize)
	go func() {
		select {
		case <-ctx.Done():
		case <-done:
		}
		close(ch)
	}()

	switch payloadSeparator {
	case "":
		{{goQual "log/slog.Debug"}}("Reading input as a single message")
		go func() {
			defer func() { done <- struct{}{} }()
			for {
				n, err := {{goQual "io.ReadFull"}}(input, buf)
				if err != nil && !{{goQual "errors.Is"}}(err, {{goQual "io.ErrUnexpectedEOF"}}) {
					{{goQual "log/slog.Error"}}("read stream: " + err.Error())
					break
				}
				ch <- buf[:n]
			}
		}()

	default:
		{{goQual "log/slog.Debug"}}("Splitting input by separator", "separator", payloadSeparator)
		scanner := {{goQual "bufio.NewScanner"}}(input)
		scanner.Buffer(buf, InputStreamBufferSize)
		scanner.Split(splitBySeparator(payloadSeparator))
		go func() {
			defer func() { done <- struct{}{} }()
			for scanner.Scan() {
				if scanner.Err() != nil {
					{{goQual "log/slog.Error"}}("read stream: " + scanner.Err().Error())
					break
				}
				ch <- scanner.Bytes()
			}
		}()
	}

	return ch
}

func splitBySeparator(separator string) {{goQual "bufio.SplitFunc"}} {
	return func(data []byte, atEOF bool) (advance int, token []byte, err error) {
		if atEOF && len(data) == 0 {
			return 0, nil, nil
		}
		if i := {{goQual "strings.Index"}}(string(data), separator); i >= 0 {
			return i + len(separator), data[0:i], nil
		}
		if atEOF {
			return len(data), data, nil
		}
		return 0, nil, nil
	}
}

func parseHeaders(headers map[string]string) {{goQualR "Headers"}} {
	h := make({{goQualR "Headers"}}, len(headers))
	for k, v := range headers {
		if uv, err := {{goQual "strconv.ParseUint"}}(v, 10, 64); err == nil {
			h[k] = uv
		} else if iv, err := {{goQual "strconv.Atoi"}}(v); err == nil {
			h[k] = iv
		} else if fv, err := {{goQual "strconv.ParseFloat"}}(v, 64); err == nil {
			h[k] = fv
		} else if bv, err := {{goQual "strconv.ParseBool"}}(v); err == nil {
			h[k] = bv
		} else {
			h[k] = v
		}
	}
	return h
}

func unescapeString(s string) string {
	var result []rune
	var escaped bool

	for _, r := range s {
		if escaped {
			switch r {
			case 'a':
				result = append(result, '\a')
			case 'b':
				result = append(result, '\b')
			case 'n':
				result = append(result, '\n')
			case 't':
				result = append(result, '\t')
			case 'r':
				result = append(result, '\r')
			case 'f':
				result = append(result, '\f')
			case 'v':
				result = append(result, '\v')
			case '\\':
				result = append(result, '\\')
			case '"':
				result = append(result, '"')
			case '\'':
				result = append(result, '\'')
			default:
				result = append(result, '\\', r)
			}
			escaped = false
		} else if r == '\\' {
			escaped = true
		} else {
			result = append(result, r)
		}
	}
	if escaped {
		result = append(result, '\\')
	}

	return string(result)
}

func showCliError(text string, cliParser *{{goQual "github.com/alexflint/go-arg.Parser"}}) {
	cliParser.Fail(text)
	{{goQual "os.Exit"}}(1)
}

func cutPayload(b []byte, maxSize int) string {
	if len(b) > maxSize {
		return {{goQual "strings.ToValidUTF8"}}(string(b[:maxSize]), "") + "..."
	} else {
		return {{goQual "strings.ToValidUTF8"}}(string(b), "")
	}
}