{{define "clientApp/server/kafka/cliMixin"}}
type KafkaCliMixin struct {
    MessageKey string `arg:"--kafka-pub-message-key" help:"Set this key in the outgoing message. By default, the message key is not set"`
}
{{- end}}

{{- /*
    .ChannelOrOperation == common.Renderable: Ref -> render.Channel or render.Channel or render.Operation or render.Operation;
    .Server == common.Renderable: Ref -> render.Server or render.Server
    .Kind == "channel" or "operation"
    */}}
{{define "clientApp/channeloperation/kafka/github.com/twmb/franz-go/setup"}}
var clientOptions []{{goQual "github.com/twmb/franz-go/pkg/kgo.Opt"}}
logLevel := {{goQual "github.com/twmb/franz-go/pkg/kgo.LogLevelNone"}}
if opts.debug {
    logLevel = {{goQual "github.com/twmb/franz-go/pkg/kgo.LogLevelDebug"}}
}
clientOptions = append(clientOptions, {{goQual "github.com/twmb/franz-go/pkg/kgo.WithLogger"}}({{goQual "github.com/twmb/franz-go/pkg/kgo.BasicLogger"}}({{goQual "os.Stderr"}}, logLevel, nil)))
clientOptions = append(clientOptions, {{goQual "github.com/twmb/franz-go/pkg/kgo.AllowAutoTopicCreation"}}())
{{- end}}

{{define "clientApp/channeloperation/kafka/github.com/twmb/franz-go/producer/connect"}}
server, err := {{goPkg (deref .Server).ProtoServer.Type}}Connect{{.Server | goIDUpper}}Producer(ctx, serverURL, clientOptions...)
if err != nil {
    return {{goQual "fmt.Errorf"}}("connect server %s: %w", serverURL, err)
}
{{- end}}

{{define "clientApp/channeloperation/kafka/github.com/twmb/franz-go/consumer/connect"}}
server, err := {{goPkg (deref .Server).ProtoServer.Type}}Connect{{.Server | goIDUpper}}Consumer(ctx, serverURL, clientOptions...)
if err != nil {
    return {{goQual "fmt.Errorf"}}("connect server %s: %w", serverURL, err)
}
{{- end}}

{{define "clientApp/message/kafka/github.com/twmb/franz-go/publish"}}
if args.{{.Server | goIDUpper}}Cmd.MessageKey != "" {
    envelope.Key = []byte(args.{{.Server | goIDUpper}}Cmd.MessageKey)
}
{{- end}}