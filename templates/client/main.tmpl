{{/* dot == tmpl.AppTemplateContext */}}

const (
	MaxLogPayloadSize     = 128
	OutputFileCreateMode  = 0644
	InputStreamBufferSize = 1024 * 1024
	DefaultProxyHost      = "127.0.0.1"
)

{{- range .ActiveProtocols}}
{{tryTmpl (print "clientApp/server/" . "/cliMixin") $}}
{{- end}}

type MainCli struct {
	Subscribe *DirectionCliCmd `arg:"subcommand:subscribe" help:"Subscribe to a channel"`
	Publish   *DirectionCliCmd `arg:"subcommand:publish" help:"Publish to a channel"`

	Docker       bool              `arg:"--docker" help:"Proxy connections to a docker-proxy keeping the original destination port numbers. Proxy host can be specified with --proxy-host"`
	ProxyHost    string            `arg:"--proxy-host" help:"If proxying is enabled, redirect all connections to this host" default:"127.0.0.1"`
	Debug        bool              `arg:"-d,--debug" help:"Enable debug logging"`
	File         string            `arg:"-f,--file" help:"File to read or write message data; - means stdin/stdout" default:"-"`
	Multiple     bool              `arg:"-m,--multiple" help:"Do not exit after the first message processed"`
	Headers      map[string]string `arg:"--headers" help:"Message header to send; format: key=value [key=value ...]"`
	EndOfMessage string            `arg:"--end-of-message" help:"Delimiter that separates the message payloads in stream. Empty string means EOF (or Ctrl-D in interactive terminal)" default:"\n"`

	RunTimeout {{goQual "time.Duration"}} `arg:"--run-timeout" help:"Timeout to run the command. By default, the command runs indefinitely"`
}

type DirectionCliCmd struct {
{{- range .Objects}}
	{{- if and (eq .Kind "channel") (isVisible .)}}
		{{ . | goIDUpper }}Cmd *{{ . | goIDUpper }}Cmd `arg:"subcommand:{{.Name | toQuotable | toKebabCase}}" help:"Channel: {{.Name | toQuotable}}"`
	{{- else if and (eq .Kind "operation") (isVisible .)}}
		{{ . | goIDUpper }}Cmd *{{ . | goIDUpper }}Cmd `arg:"subcommand:{{.Name | toQuotable | toKebabCase}}" help:"Operation: {{.Name | toQuotable}}"`
	{{- end}}
{{- end}}
}

{{- range .Objects}}
	{{- if and (eq .Kind "server") (isVisible .)}}
		type {{. | goIDUpper}}CliCmd struct {
			{{if tryTmpl (print "clientApp/server/" ((deref .).Protocol) "/cliMixin") .}}{{(deref .).Protocol | goIDUpper}}CliMixin{{end}}

			// Server variables
			{{- range .Variables.Entries}}
				{{- with .Value}}
					{{- if .Default}}
						{{. | goIDUpper}} string `arg:"--{{.Name | toQuotable | toKebabCase}}" help:"Server variable: {{.Name | toQuotable}}" default:"{{.Default | toQuotable}}"`
					{{- else}}
						{{. | goIDUpper}} string `arg:"--{{.Name | toQuotable | toKebabCase}},required" help:"Server variable: {{.Name | toQuotable}}"`
					{{- end}}
				{{- end}}
			{{- end}}

			// Other
			URL  *{{goQual "net/url.URL"}} `arg:"--url" help:"Override server URL"`
		}
	{{- end}}
{{- end}}

type channelOptions struct {
	cliParser *{{goQual "github.com/alexflint/go-arg.Parser"}}

	publish          bool
	debug            bool
	multipleMessages bool
	payloadSeparator string

	stream         {{goQual "io.ReadWriter"}}
	publishHeaders map[string]string
	proxyHost      string
}

func main() {
	cliArgs := MainCli{}
	cliParser := {{goQual "github.com/alexflint/go-arg.MustParse"}}(&cliArgs)

	logLevel := {{goQual "log/slog.LevelError"}}
	if cliArgs.Debug {
		logLevel = {{goQual "log/slog.LevelDebug"}}
	}
	{{goQual "log/slog.SetLogLoggerLevel"}}(logLevel)

	var dirCmd *DirectionCliCmd
	switch {
	case cliArgs.Subscribe != nil:
		dirCmd = cliArgs.Subscribe
	case cliArgs.Publish != nil:
		dirCmd = cliArgs.Publish
	default:
		showCliError("No direction selected. Append --help for more information", cliParser)
	}

	chanOptions := channelOptions{
		publish:          cliArgs.Publish != nil,
		cliParser:        cliParser,
		debug:            cliArgs.Debug,
		multipleMessages: cliArgs.Multiple,
		payloadSeparator: unescapeString(cliArgs.EndOfMessage),
		publishHeaders:   cliArgs.Headers,
	}

	if cliArgs.Docker {
		chanOptions.proxyHost = cliArgs.ProxyHost
	}

	switch cliArgs.File {
	case "-":
		if chanOptions.publish {
			{{goQual "log/slog.Debug"}}("Writing to stdout")
			chanOptions.stream = {{goQual "os.Stdout"}}
		} else {
			{{goQual "log/slog.Debug"}}("Reading from stdin")
			chanOptions.stream = {{goQual "os.Stdin"}}
		}
	case "":
		showCliError("No file specified. Append --help for more information", cliParser)
	default:
		flag := {{goQual "os.O_CREATE"}} | {{goQual "os.O_WRONLY"}} | {{goQual "os.O_APPEND"}}
		if chanOptions.publish {
			flag = {{goQual "os.O_RDONLY"}}
		}
		{{goQual "log/slog.Debug"}}("Opening file", "name", cliArgs.File, "flag", {{goQual "fmt.Sprintf"}}("%#x", flag), "mode", {{goQual "fmt.Sprintf"}}("%#o", OutputFileCreateMode))
		f, err := {{goQual "os.OpenFile"}}(cliArgs.File, flag, OutputFileCreateMode)
		if err != nil {
			{{goQual "log/slog.Error"}}(err.Error())
			{{goQual "os.Exit"}}(1)
		}
		defer f.Close()
		chanOptions.stream = f
	}

	ctx := {{goQual "context.Background"}}()
	if cliArgs.RunTimeout > 0 {
		var cancel {{goQual "context.CancelFunc"}}
		ctx, cancel = {{goQual "context.WithTimeout"}}(ctx, cliArgs.RunTimeout)
		defer cancel()
	}

	var err error
	switch {
	{{- range .Objects}}
		{{- if and (eq .Kind "channel") (isVisible .)}}
			case dirCmd.{{. | goIDUpper}}Cmd != nil:
				err = channel{{. | goIDUpper}}(ctx, dirCmd.{{. | goIDUpper}}Cmd, chanOptions)
		{{- else if and (eq .Kind "operation") (isVisible .)}}
			case dirCmd.{{. | goIDUpper}}Cmd != nil:
				err = operation{{. | goIDUpper}}(ctx, dirCmd.{{. | goIDUpper}}Cmd, chanOptions)
		{{- end}}
	{{- end}}
	default:
		showCliError("No channel or operation selected. Append --help for more information", cliParser)
	}

	switch {
	case {{goQual "errors.Is"}}(err, {{goQual "context.DeadlineExceeded"}}):
		{{goQual "log/slog.Warn"}}("Running timeout exceeded", "err", err)
	case err != nil:
		{{goQual "log/slog.Error"}}(err.Error())
		{{goQual "os.Exit"}}(1)
	case {{goQual "errors.Is"}}(ctx.Err(), {{goQual "context.DeadlineExceeded"}}):
		{{goQual "log/slog.Warn"}}("Running timeout exceeded")
	}
}

{{- range .Objects}}
	{{- if and (eq .Kind "channel") (isVisible .)}}
		{{template "clientApp/channel" .}}
	{{- else if and (eq .Kind "operation") (isVisible .)}}
		{{template "clientApp/operation" .}}
	{{- end}}
{{- end}}

{{template "utils.tmpl"}}