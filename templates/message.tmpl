{{- with $message := deref .}}

{{- /*
Message is a kind of objects, that can be defined both in components and root key (`components.messages` and `messages`),
and in the same time it can be referenced from other objects (`channel.[publish|subscribe].message`).

This may lead to name duplicates in the generated code due to being fed an object to templates several times (the object
itself + refs). Also, as a corner case, a message with the same name may additionally popped up from other spec files.

To mitigate this, here we just render a New* function pair only one time for the name.
*/}}
{{- if print "Message" (goid $) | ndefined}}
{{- def .OutType .InType }}
func New{{ $ | goid }}Out() *{{ .OutType | gousage }} {
    return &{{ .OutType| gousage }}{}
}

func New{{ $ | goid }}In() *{{ .InType| gousage }} {
    return &{{ .InType| gousage }}{}
}
{{- print "Message" (goid $) | def }}
{{- end}}

{{- if and .BindingsType (ndefined .BindingsType)}}
    {{- .BindingsType| godef }}
    {{- range $proto := .BindingsProtocols}}
        {{- $bindingsValue := $message.ProtoBindingsValue $proto}}
        func (c {{ $message.BindingsType | gousage }}) {{ $proto | goid }}() {{$bindingsValue.Type | gousage}} {
        b := {{$bindingsValue| gousage}}
        {{- with $message.Bindings}}
            {{- $jvals := .JSONValues.GetOrEmpty $proto}}
            {{- range $jval := $jvals.Entries}}
                {{ $jval.Key | toCamelCase }} := {{$jval.Value | golit}}
                _ = {{goqual "encoding/json.Unmarshal"}}([]byte({{$jval.Key | toCamelCase }}), &b.{{$jval.Key}})
            {{- end}}
        {{- end}}
        return b
        }
    {{- end}}
{{- end }}

{{- $headersType := coalesce .HeadersType .HeadersFallbackType}}

{{- if ndefined .OutType }}
{{.OutType| godef}}

func (m *{{ .OutType | goid }}) WithPayload(payload {{.PayloadType| gousage}}) *{{ .OutType | goid }} {
    m.Payload = payload
    return m
}

func (m *{{ .OutType | goid }}) WithHeaders(headers {{$headersType| gousage}}) *{{ .OutType | goid }} {
    m.Headers = headers
    return m
}

{{- with visible .CorrelationID}}
func (m {{ $message.OutType | goid }}) SetCorrelationID(value {{ .TargetVarType $message.OutType | gousage}}) {
    {{ .RenderSetterBody "m" $message.OutType}}
}
{{- end}}
{{- end}}

{{- if ndefined .InType }}
{{.InType| godef}}

func (m *{{ .InType | goid }}) MessagePayload() {{.PayloadType| gousage}} {
    return m.Payload
}

func (m *{{ .InType | goid }}) MessageHeaders() {{$headersType| gousage}} {
    return m.Headers
}

{{- with visible .CorrelationID}}
func (m {{ $message.InType | goid }}) CorrelationID() (value {{.TargetVarType $message.InType | gousage}}, err error) {
    {{ .RenderGetterBody "value" $message.InType }}
    return
}
{{- end}}
{{- end}}

{{- end}}