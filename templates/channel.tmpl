{{- with $channel := deref .}}

{{- if and .ParametersType (gondefined .ParametersType) }}
    {{ .ParametersType | godef }}
{{- end }}

func {{$ | goid}}Name({{if .ParametersType}}params {{.ParametersType | gousage}}{{end}}) {{qualrun "ParamString"}} {
{{- if .ParametersType}}
    paramMap := map[string]string{
    {{- range .ParametersType.Fields}}
        params.{{.Name}}.Name(): params.{{.Name}}.String(),
    {{- end}}
    }
    return {{qualrun "ParamString"}}{
        Expr: {{. | goid | golit}},
        Parameters: paramMap,
    }
{{- else}}
    return {{qualrun "ParamString"}}{
        Expr: {{$ | goid | golit}},
    }
{{- end}}
}

{{- if and .BindingsType (gondefined .BindingsType) }}
    {{ .BindingsType | godef }}
    {{- range $proto := .BindingsProtocols }}
        {{- $bindingsValue := $channel.ProtoBindingsValue $proto }}
        func (c {{ $channel.BindingsType | gousage }}) {{ $proto | capitalize | goid }}() {{$bindingsValue.Type | gousage}} {
            b := {{$bindingsValue | gousage}}
            {{- if $channel.BindingsChannelPromise }}
                {{- $jvals := $channel.BindingsChannelPromise.T.JSONValues.GetOrEmpty $proto }}
                {{- range $jvals.Entries}}
                    {{.Key | toCamelCase }} := {{.Value | golit}}
                    _ = {{qual "encoding/json.Unmarshal"}}([]byte({{.Key | toCamelCase }}), &b.{{.Key}})
                {{- end}}
            {{- end}}
            {{- if $channel.BindingsPublishPromise}}
                {{- $jvals := $channel.BindingsPublishPromise.T.JSONValues.GetOrEmpty $proto}}
                {{- range $jvals.Entries}}
                    {{.Key | toCamelCase }}Pub := {{.Value | golit}}
                    _ = {{qual "encoding/json.Unmarshal"}}([]byte({{.Key | toCamelCase }}Pub), &b.PublisherBindings.{{.Key}})
                {{- end}}
            {{- end}}
            {{- if $channel.BindingsSubscribePromise}}
                {{- $jvals := $channel.BindingsSubscribePromise.T.JSONValues.GetOrEmpty $proto}}
                {{- range $jvals.Entries}}
                    {{.Key | toCamelCase }}Sub := {{.Value | golit}}
                    _ = {{qual "encoding/json.Unmarshal"}}([]byte({{.Key | toCamelCase }}Sub), &b.SubscriberBindings.{{.Key}})
                {{- end}}
            {{- end}}
            return b
        }
    {{- end}}
{{- end}}

{{- end}}