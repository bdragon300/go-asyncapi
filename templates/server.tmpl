{{- /* dot == render.Renderable: Ref -> render.Server or render.Server */}}
{{- with $server := deref .}}

{{- if .ProtocolVersion}}
const {{$ | goid}}ProtocolVersion = {{.ProtocolVersion | golit}}
{{- end}}

func {{$ | goid}}URL(
{{- range .Variables.Entries}}
    {{- .Value | goidorig}} string,
{{- end }}) {{goqualrun "ParamURL"}} {
    {{- if gt .Variables.Len 0}}
        {{- range .Variables.Entries}}
            {{- if .Value.Default}}
                if {{.Value | goidorig}} == "" {
                    {{.Value | goidorig}} = {{.Value.Default | golit}}
                }
            {{- end}}
        {{- end}}
        paramMap := map[string]string{
            {{- range .Variables.Entries}}
                {{.Key | golit}}: {{.Value | goidorig}},
            {{- end}}
        }
        return {{goqualrun "ParamURL"}}{
            Host: {{.Host | golit}},
            Pathname: {{.Pathname | golit}},
            Parameters: paramMap,
        }
    {{- else}}
        return {{goqualrun "ParamURL"}}{
            Host: {{.Host | golit}},
            Pathname: {{.Pathname | golit}},
        }
    {{- end}}
}

{{- if and .BindingsType (ndefined .BindingsType)}}
    {{- .BindingsType | godef}}
    {{- range $proto := .BindingsProtocols}}
        {{- $bindingsValue := $server.ProtoBindingsValue $proto}}
        func (c {{ $server.BindingsType | gousage }}) {{ $proto | goid }}() {{$bindingsValue.Type | gousage}} {
            b := {{$bindingsValue | gousage}}
            {{- with $server.Bindings}}
                {{- $jvals := .JSONValues.GetOrEmpty $proto}}
                {{- range $jval := $jvals.Entries}}
                    {{$jval.Key | toCamelCase }} := {{$jval.Value | golit}}
                    _ = {{goqual "encoding/json.Unmarshal"}}([]byte({{$jval.Key | toCamelCase }}), &b.{{$jval.Key}})
                {{- end}}
            {{- end}}
            return b
        }
    {{- end}}
{{- end}}

{{- end}}