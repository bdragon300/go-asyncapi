{{- /* dot == render.ProtoChannel */}}
{{define "code/proto/amqp/channel/newFunction/block1"}}
    {{- if .BindingsProtocols | has .Protocol}}
        bindings := {{ .BindingsType | goUsage }}{}.{{.Protocol | goIDUpper}}()
        switch bindings.ChannelType {
        case {{goQualR .Protocol "ChannelTypeQueue"}}:
            res.queue = res.address.String()
        default:
            res.routingKey = res.address.String()
        }
        if bindings.ExchangeConfiguration.Name != nil {
            res.exchange = *bindings.ExchangeConfiguration.Name
        }
        if bindings.QueueConfiguration.Name != "" {
            res.queue = bindings.QueueConfiguration.Name
        }
    {{- else}}
        res.routingKey = res.address.String()
    {{- end}}
{{- end}}
{{define "code/proto/amqp/channel/publishMethods/block1"}}
    envelope.SetRoutingKey(c.RoutingKey())
{{- end}}

{{- with once .Type}}
    {{template "code/proto/channel/newFunction" $}}
    {{template "code/proto/channel/openFunction" $}}

    {{ . | goDef }}

    {{template "code/proto/channel/commonMethods" $}}

    func (c {{ . | goUsage }}) Exchange() string {
        return c.exchange
    }

    func (c {{ . | goUsage }}) Queue() string {
        return c.queue
    }

    func (c {{ . | goUsage }}) RoutingKey() string {
        return c.routingKey
    }

    {{if $.IsPublisher}}{{template "code/proto/channel/publishMethods" $}}{{end}}
    {{if $.IsSubscriber}}{{template "code/proto/channel/subscribeMethods" $}}{{end}}
    {{template "code/proto/channel/serverInterface" $}}
{{- end}}
