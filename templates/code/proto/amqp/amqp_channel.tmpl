{{- /* dot == render.ProtoChannel */}}
{{define "code/proto/amqp/channel/newFunction/block1"}}
    {{- if .BindingsProtocols | has .Protocol}}
        bindings := {{ .BindingsType | goUsage }}{}.{{.Protocol | goIDUpper}}()
        switch bindings.ChannelType {
        case {{goQualR .Protocol "ChannelTypeQueue"}}:
            res.queue = res.address.String()
        default:
            res.routingKey = res.address.String()
        }
        if bindings.ExchangeConfiguration.Name != nil {
            res.exchange = *bindings.ExchangeConfiguration.Name
        }
        if bindings.QueueConfiguration.Name != "" {
            res.queue = bindings.QueueConfiguration.Name
        }
    {{- else}}
        res.routingKey = res.address.String()
    {{- end}}
{{- end}}
{{define "code/proto/amqp/channel/publishMethods/block1"}}
    envelope.SetRoutingKey(c.RoutingKey())
{{- end}}

{{- pin . }}
{{template "code/proto/channel/newFunction" .}}
{{template "code/proto/channel/openFunction" .}}

type {{. | goIDUpper}}{{.Protocol | goIDUpper}} struct {
    address    {{goQualR "ParamString"}}
    {{if .IsPublisher}}publisher  {{goQualR .Protocol "Publisher"}}{{end}}
    {{if .IsSubscriber}}subscriber {{goQualR .Protocol "Subscriber"}}{{end}}
    exchange   string
    queue      string
    routingKey string
}

func (c {{. | goIDUpper}}{{.Protocol | goIDUpper}}) Exchange() string {
    return c.exchange
}

func (c {{. | goIDUpper}}{{.Protocol | goIDUpper}}) Queue() string {
    return c.queue
}

func (c {{. | goIDUpper}}{{.Protocol | goIDUpper}}) RoutingKey() string {
    return c.routingKey
}

{{template "code/proto/channel/commonMethods" .}}
{{if .IsPublisher}}{{template "code/proto/channel/publishMethods" .}}{{end}}
{{if .IsSubscriber}}{{template "code/proto/channel/subscribeMethods" .}}{{end}}
{{template "code/proto/channel/serverInterface" .}}
