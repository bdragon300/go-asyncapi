{{- /* dot == render.Server */}}

{{define "code/proto/tcp/server/impl/net/connectFunction"}}
func Connect{{ . | goIDUpper }}Bidi(ctx {{goQual "context.Context"}}, url *{{goQual "net/url.URL"}}) (*{{ . | goIDUpper }}Closable, error) {
    producer, err := {{with impl .Protocol}}{{goPkg .}}{{end}}NewProducer(url.Host, url.Scheme, "")
    if err != nil {
        return nil, err
    }
    consumer, err := {{with impl .Protocol}}{{goPkg .}}{{end}}NewConsumer(url.Host, url.Scheme)
    if err != nil {
        return nil, err
    }
    return &{{ . | goIDUpper }}Closable{
        {{. | goIDUpper}}{producer: producer, consumer: consumer},
    }, nil
}
{{- end}}

{{define "code/proto/tcp/server/impl/net/connectProducerFunction"}}
func Connect{{ . | goIDUpper }}Producer(ctx {{goQual "context.Context"}}, url *{{goQual "net/url.URL"}}) (*{{ . | goIDUpper }}Closable, error) {
    producer, err := {{with impl .Protocol}}{{goPkg .}}{{end}}NewProducer(url.Host, url.Scheme, "")
    if err != nil {
        return nil, err
    }
    return &{{ . | goIDUpper }}Closable{
        {{. | goIDUpper}}{producer: producer},
    }, nil
}
{{- end}}

{{define "code/proto/tcp/server/impl/net/connectConsumerFunction"}}
func Connect{{ . | goIDUpper }}Consumer(ctx {{goQual "context.Context"}}, url *{{goQual "net/url.URL"}}) (*{{ . | goIDUpper }}Closable, error) {
    consumer, err := {{with impl .Protocol}}{{goPkg .}}{{end}}NewConsumer(url.Host, url.Scheme)
    if err != nil {
        return nil, err
    }
    return &{{ . | goIDUpper }}Closable{
        {{. | goIDUpper}}{consumer: consumer},
    }, nil
}
{{- end}}