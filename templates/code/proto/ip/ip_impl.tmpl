{{- /* dot == render.Server */}}

{{define "code/proto/ip/server/impl/net/connectFunction"}}
func Connect{{ . | goIDUpper }}Bidi(ctx {{goQual "context.Context"}}, url *{{goQual "net/url.URL"}}, localHost string) (*{{ . | goIDUpper }}Closable, error) {
    if !{{goQual "strings.Contains"}}(url.Host, ":") {
        return nil, {{goQual "errors.New"}}("missing ip protocol family in url port")
    }
    h, p, err := {{goQual "net.SplitHostPort"}}(url.Host)
	if err != nil {
        return nil, {{goQual "fmt.Errorf"}}("parse url: %w", err)
    }
    client, err := {{with impl .Protocol}}{{goPkg .}}{{end}}NewClient(localHost, h, url.Scheme + ":" + p)
    if err != nil {
        return nil, err
    }
    consumer, producer := client, client
    return &{{ . | goIDUpper }}Closable{
        {{. | goIDUpper}}{producer: producer, consumer: consumer},
    }, nil
}
{{- end}}

{{define "code/proto/ip/server/impl/net/connectProducerFunction"}}
func Connect{{ . | goIDUpper }}Producer(ctx {{goQual "context.Context"}}, url *{{goQual "net/url.URL"}}) (*{{ . | goIDUpper }}Closable, error) {
    if !{{goQual "strings.Contains"}}(url.Host, ":") {
        return nil, {{goQual "errors.New"}}("missing ip protocol family in url port")
    }
    h, p, err := {{goQual "net.SplitHostPort"}}(url.Host)
	if err != nil {
        return nil, {{goQual "fmt.Errorf"}}("parse url: %w", err)
    }
    producer, err := {{with impl .Protocol}}{{goPkg .}}{{end}}NewClient("", h, url.Scheme + ":" + p)
    if err != nil {
        return nil, err
    }
    return &{{ . | goIDUpper }}Closable{
        {{. | goIDUpper}}{producer: producer},
    }, nil
}
{{- end}}

{{define "code/proto/ip/server/impl/net/connectConsumerFunction"}}
func Connect{{ . | goIDUpper }}Consumer(ctx {{goQual "context.Context"}}, url *{{goQual "net/url.URL"}}) (*{{ . | goIDUpper }}Closable, error) {
    if !{{goQual "strings.Contains"}}(url.Host, ":") {
        return nil, {{goQual "errors.New"}}("missing ip protocol family in url port")
    }
    h, p, err := {{goQual "net.SplitHostPort"}}(url.Host)
	if err != nil {
        return nil, {{goQual "fmt.Errorf"}}("parse url: %w", err)
    }
    consumer, err := {{with impl .Protocol}}{{goPkg .}}{{end}}NewClient(h, "", url.Scheme + ":" + p)
    if err != nil {
        return nil, err
    }
    return &{{ . | goIDUpper }}Closable{
        {{. | goIDUpper}}{consumer: consumer},
    }, nil
}
{{- end}}
