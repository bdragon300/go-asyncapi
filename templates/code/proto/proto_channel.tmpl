{{- /* dot == render.ProtoChannel */}}

{{define "code/proto/channel/newFunction"}}
func New{{ .Channel | goIDUpper }}{{.Protocol | goIDUpper}}(
    {{ with .ParametersType}}params {{ . | goUsage}},{{end}}
    {{ if .IsPublisher}}publisher {{goQualR .Protocol "Publisher"}},{{end}}
    {{ if .IsSubscriber}}subscriber {{goQualR .Protocol "Subscriber"}},{{end}}
) *{{.Type| goUsage}} {
    res := {{.Type | goUsage}}{
        address: {{.Channel | goIDUpper}}Address({{if .ParametersType}}params{{end}}),
        {{- if .IsPublisher}}publisher: publisher,{{end}}
        {{- if .IsSubscriber}}subscriber: subscriber,{{end}}
    }
    {{- with tryTmpl (print "code/proto/" .Protocol "/channel/newFunction/block1") .}}
        {{.}}
    {{- end}}
    return &res
}
{{- end}}

{{define "code/proto/channel/openFunction"}}
func Open{{ .Channel | goIDUpper }}{{.Protocol | goIDUpper}}(
    ctx {{goQual "context.Context"}},
    {{ with .ParametersType}}params {{. | goUsage}},{{end}}
    server {{.Channel | goIDUpper }}Server{{.Protocol | goIDUpper}},
) (*{{.Type | goUsage}}, error) {
    var err error
    {{- if .BindingsProtocols | has .Protocol}}
        chBindings := {{.BindingsType | goUsage}}{}.{{.Protocol | goIDUpper}}()
    {{- end }}

    {{- if or .IsPublisher .IsSubscriber}}
        address, err := {{.Channel | goIDUpper}}Address({{if .ParametersType}}params{{end}}).Expand()
        if err != nil {
            return nil, err
        }
    {{- end}}
    {{- if .IsPublisher}}
        var publisher {{goQualR .Protocol "Publisher"}}
        producer := server.Producer()
        if producer != nil {
            publisher, err = producer.Publisher(ctx, address, {{if .BindingsProtocols | has .Protocol}}&chBindings{{else}}nil{{end}}, nil)
            if err != nil {
                return nil, err
            }
        }
    {{- end}}
    {{- if .IsSubscriber}}
        var subscriber {{goQualR .Protocol "Subscriber"}}
        consumer := server.Consumer()
        if consumer != nil {
            subscriber, err = consumer.Subscriber(ctx, address, {{if .BindingsProtocols | has .Protocol}}&chBindings{{else}}nil{{end}}, nil)
            if err != nil {
                return nil, err
            }
        }
    {{- end}}

    return New{{ .Channel | goIDUpper }}{{.Protocol | goIDUpper}}(
        {{ if .ParametersType}}params,{{end}}
        {{ if .IsPublisher}}publisher,{{end}}
        {{ if .IsSubscriber}}subscriber,{{end}}
    ), nil
}
{{- end}}

{{define "code/proto/channel/commonMethods"}}
func (c {{.Type | goUsage}}) Address() {{goQualR "ParamString"}} {
    return c.address
}

{{- if .BindingsProtocols | has .Protocol}}
func (c {{.Type | goUsage}}) Bindings() {{goQualR .Protocol "ChannelBindings"}} {
    return {{.BindingsType | goUsage}}{}.{{.Protocol | goIDUpper}}()
}
{{- end}}

func (c {{.Type | goUsage}}) Close() (err error) {
    {{- if .IsPublisher}}
        if c.publisher != nil {
            err = {{goQual "errors.Join"}}(err, c.publisher.Close())
        }
    {{- end}}
    {{- if .IsSubscriber}}
        if c.subscriber != nil {
            err = {{goQual "errors.Join"}}(err, c.subscriber.Close())
        }
    {{- end}}
    return
}
{{- end}}

{{define "code/proto/channel/publishMethods"}}
type {{ .Channel | goIDUpper }}EnvelopeMarshaler{{.Protocol | goIDUpper}} interface {
    Marshal{{.Channel | goIDUpper}}{{.Protocol | goIDUpper}}(envelope {{goQualR .Protocol "EnvelopeWriter"}}) error
}

{{- range .BoundMessages}}
    {{- if not (isVisible .) }}{{continue}}{{end}}
    func (c {{ $.Type | goUsage }}) Seal{{. | goIDUpper}}(
        envelope {{goQualR $.Protocol "EnvelopeWriter"}},
        message {{ $.Channel | goIDUpper }}EnvelopeMarshaler{{$.Protocol | goIDUpper}},
    ) error {
        if err := message.Marshal{{$.Channel | goIDUpper}}{{$.Protocol | goIDUpper}}(envelope); err != nil {
            return err
        }
        {{ with tryTmpl (print "code/proto/" $.Protocol "/channel/publishMethods/block1") .}}{{.}}{{end}}
        {{- if (deref .).BindingsProtocols | has $.Protocol }}
            envelope.SetBindings({{(deref .).BindingsType | goUsage}}{}.{{$.Protocol | goIDUpper}}())
        {{- end}}
        return nil
    }

    func (c {{ $.Type | goUsage }}) Publish{{. | goIDUpper}}(
        ctx {{goQual "context.Context"}},
        {{if not (impl $.Protocol)}}envelope {{goQualR $.Protocol "EnvelopeWriter"}},{{end}}
        message {{ $.Channel | goIDUpper }}EnvelopeMarshaler{{$.Protocol | goIDUpper}},
    ) error {
        {{- with impl $.Protocol}}
            envelope := {{goPkg .}}NewEnvelopeOut()
        {{- end}}
        if err := c.Seal{{. | goIDUpper}}(envelope, message); err != nil {
            return err
        }
        {{ with tryTmpl (print "code/proto/" $.Protocol "/channel/publishMethods/block2") .}}{{.}}{{end}}
        return c.Publish(ctx, envelope)
    }
{{- end}}

func (c {{.Type| goUsage}}) Publisher() {{goQualR .Protocol "Publisher"}} {
    return c.publisher
}

func (c {{.Type| goUsage}}) Publish(ctx {{goQual "context.Context"}}, envelopes ...{{goQualR .Protocol "EnvelopeWriter"}}) error {
    return c.publisher.Send(ctx, envelopes...)
}
{{- end}}

{{define "code/proto/channel/subscribeMethods"}}
type {{ .Channel | goIDUpper }}EnvelopeUnmarshaler{{.Protocol | goIDUpper}} interface {
    Unmarshal{{.Channel | goIDUpper}}{{.Protocol | goIDUpper}}(envelope {{goQualR .Protocol "EnvelopeReader"}}) error
}

{{- range .BoundMessages}}
    {{- if not (isVisible .) }}{{continue}}{{end}}
    func (c {{ $.Type | goUsage }}) Unseal{{. | goIDUpper}}(
        envelope {{goQualR $.Protocol "EnvelopeReader"}},
        message {{ $.Channel | goIDUpper }}EnvelopeUnmarshaler{{$.Protocol | goIDUpper}},
    ) error {
        return message.Unmarshal{{$.Channel | goIDUpper}}{{$.Protocol | goIDUpper}}(envelope)
    }

    func (c {{ $.Type | goUsage }}) Subscribe{{. | goIDUpper}}(
        ctx {{goQual "context.Context"}},
        cb func(message {{ goPkg (deref .).InType}}{{ goIDUpper .}}Receiver),
    ) (err error) {
        subCtx, cancel := {{goQual "context.WithCancelCause"}}(ctx)
        defer cancel(nil)

        return c.Subscribe(subCtx, func(envelope {{goQualR $.Protocol "EnvelopeReader"}}) {
            message := new({{ (deref .).InType | goUsage }})
            if err2 := c.Unseal{{. | goIDUpper}}(envelope, message); err2 != nil {
                err = {{goQual "fmt.Errorf"}}("open message envelope: %w", err2)
                cancel(err)
                return
            }
            cb(message)
        })
    }
{{- end}}

func (c {{.Type| goUsage}}) Subscriber() {{goQualR .Protocol "Subscriber"}} {
    return c.subscriber
}

func (c {{.Type| goUsage}}) Subscribe(ctx {{goQual "context.Context"}}, cb func(envelope {{goQualR .Protocol "EnvelopeReader"}})) error {
    return c.subscriber.Receive(ctx, cb)
}
{{- end}}

{{define "code/proto/channel/serverInterface"}}
type {{ .Channel | goIDUpper }}Server{{.Protocol | goIDUpper}} interface {
    Open{{.Channel | goIDUpper}}{{.Protocol | goIDUpper}}(ctx {{goQual "context.Context"}}, {{if .ParametersType}}params {{ .ParametersType | goUsage }}{{end}}) (*{{ .Type | goUsage }}, error)
    {{if .IsPublisher}}Producer() {{goQualR .Protocol "Producer"}}{{end}}
    {{if .IsSubscriber}}Consumer() {{goQualR .Protocol "Consumer"}}{{end}}
}
{{- end}}