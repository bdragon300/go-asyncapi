{{- /* dot == render.Server */}}

{{define "code/proto/mqtt/server/impl/github.com/eclipse/paho.mqtt.golang/connectFunction"}}
func Connect{{ . | goIDUpper }}Bidi(ctx {{goQual "context.Context"}}, url *{{goQual "net/url.URL"}}, opts *{{goQual "github.com/eclipse/paho.mqtt.golang.ClientOptions"}}) (*{{ . | goIDUpper }}Closable, error) {
    var bindings *{{goQualR .Protocol "ServerBindings"}}
    {{- if .BindingsProtocols | has .Protocol}}
        bindings = {{goQualR "ToPtr"}}({{.BindingsType | goUsage}}{}.{{.Protocol | goIDUpper}}())
    {{- end}}
    client, err := {{with impl .Protocol}}{{goPkg .}}{{end}}NewClient(ctx, url.String(), bindings, opts)
    if err != nil {
        return nil, err
    }
    producer, consumer := client, client
    return &{{ . | goIDUpper }}Closable{
        {{. | goIDUpper}}{producer: producer, consumer: consumer},
    }, nil
}
{{- end}}

{{define "code/proto/mqtt/server/impl/github.com/eclipse/paho.mqtt.golang/connectProducerFunction"}}
func Connect{{ . | goIDUpper }}Producer(ctx {{goQual "context.Context"}}, url *{{goQual "net/url.URL"}}, opts *{{goQual "github.com/eclipse/paho.mqtt.golang.ClientOptions"}}) (*{{ . | goIDUpper }}Closable, error) {
    var bindings *{{goQualR .Protocol "ServerBindings"}}
    {{- if .BindingsProtocols | has .Protocol}}
        bindings = {{goQualR "ToPtr"}}({{.BindingsType | goUsage}}{}.{{.Protocol | goIDUpper}}())
    {{- end}}
    producer, err := {{with impl .Protocol}}{{goPkg .}}{{end}}NewClient(ctx, url.String(), bindings, opts)
    if err != nil {
        return nil, err
    }
    return &{{ . | goIDUpper }}Closable{
        {{. | goIDUpper}}{producer: producer},
    }, nil
}
{{- end}}

{{define "code/proto/mqtt/server/impl/github.com/eclipse/paho.mqtt.golang/connectConsumerFunction"}}
func Connect{{ . | goIDUpper }}Consumer(ctx {{goQual "context.Context"}}, url *{{goQual "net/url.URL"}}, opts *{{goQual "github.com/eclipse/paho.mqtt.golang.ClientOptions"}}) (*{{ . | goIDUpper }}Closable, error) {
    var bindings *{{goQualR .Protocol "ServerBindings"}}
    {{- if .BindingsProtocols | has .Protocol}}
        bindings = {{goQualR "ToPtr"}}({{.BindingsType | goUsage}}{}.{{.Protocol | goIDUpper}}())
    {{- end}}
    consumer, err := {{with impl .Protocol}}{{goPkg .}}{{end}}NewClient(ctx, url.String(), bindings, opts)
    if err != nil {
        return nil, err
    }
    return &{{ . | goIDUpper }}Closable{
        {{. | goIDUpper}}{consumer: consumer},
    }, nil
}
{{- end}}