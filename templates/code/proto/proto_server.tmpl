{{- /* dot == render.ProtoServer */}}

{{define "code/proto/server/newFunction"}}
func New{{ .Server | goIDUpper }}(producer {{goQualR .Protocol "Producer"}}, consumer {{goQualR .Protocol "Consumer"}}) {{ .Type | ptr | goUsage }} {
    return &{{ .Type | goUsage }}{
        producer: producer,
        consumer: consumer,
    }
}
{{- end}}

{{define "code/proto/server/connectFunctions"}}
{{- if and .IsPublisher .IsSubscriber}}
{{- with impl .Protocol}}

type {{ $.Server | goIDUpper }}Closable struct {
    {{ $.Type | goUsage }}
}

func (c {{ $.Server | goIDUpper }}Closable) Close() error {
    var err error
    if v, ok := any(c.producer).({{goQual "io.Closer"}}); ok {
        err = {{goQual "errors.Join"}}(err, v.Close())
    }
    if v, ok := any(c.consumer).({{goQual "io.Closer"}}); ok {
        err = {{goQual "errors.Join"}}(err, v.Close())
    }
    return err
}

{{- with tryTmpl (print "code/proto/" $.Protocol "/server/impl/" .Manifest.Name "/connectFunction") $}}
    {{.}}
{{- else}}
    func Connect{{ $.Server | goIDUpper }}Bidi(ctx {{goQual "context.Context"}}, url *{{goQual "net/url.URL"}}) (*{{ $.Server | goIDUpper }}Closable, error) {
        var bindings *{{goQualR .Protocol "ServerBindings"}}
        {{- if $.BindingsProtocols | has $.Protocol}}
            bindings = {{goQualR "ToPtr"}}({{$.BindingsType | goUsage}}{}.{{$.Protocol | goIDUpper}}())
        {{- end}}
        client, err := {{goPkg .}}NewClient(ctx, url, bindings)
        if err != nil {
            return nil, err
        }
        producer, consumer := client, client
        return &{{ $.Server | goIDUpper }}Closable{
            {{ $.Type | goUsage }}{producer: producer, consumer: consumer},
        }, nil
    }
{{- end}}

{{- if $.IsPublisher}}
    {{- with tryTmpl (print "code/proto/" $.Protocol "/server/impl/" .Manifest.Name "/connectProducerFunction") $}}
        {{.}}
    {{- else}}
        func Connect{{ $.Server | goIDUpper }}Producer(ctx {{goQual "context.Context"}}, url *{{goQual "net/url.URL"}}) (*{{ $.Server | goIDUpper }}Closable, error) {
            var bindings *{{goQualR $.Protocol "ServerBindings"}}
            {{- if $.BindingsProtocols | has $.Protocol}}
                bindings = {{goQualR "ToPtr"}}({{$.BindingsType | goUsage}}{}.{{$.Protocol | goIDUpper}}())
            {{- end}}
            producer, err := {{goPkg .}}NewClient(ctx, url, bindings)
            if err != nil {
                return nil, err
            }
            return &{{ $.Server | goIDUpper }}Closable{
                {{ $.Type | goUsage }}{producer: producer},
            }, nil
        }
    {{- end}}
{{- end}}

{{- if $.IsSubscriber}}
    {{- with tryTmpl (print "code/proto/" $.Protocol "/server/impl/" .Manifest.Name "/connectConsumerFunction") $}}
        {{.}}
    {{- else}}
        func Connect{{ $.Server | goIDUpper }}Consumer(ctx {{goQual "context.Context"}}, url *{{goQual "net/url.URL"}}) (*{{ $.Server | goIDUpper }}Closable, error) {
            var bindings *{{goQualR $.Protocol "ServerBindings"}}
            {{- if $.BindingsProtocols | has $.Protocol}}
                bindings = {{goQualR "ToPtr"}}({{$.BindingsType | goUsage}}{}.{{$.Protocol | goIDUpper}}())
            {{- end}}
            consumer, err := {{goPkg .}}NewClient(ctx, url, bindings)
            if err != nil {
                return nil, err
            }
            return &{{ $.Server | goIDUpper }}Closable{
                {{ $.Type | goUsage }}{consumer: consumer},
            }, nil
        }
    {{- end}}
{{- end}}
{{- end}}
{{- end}}
{{- end}}

{{define "code/proto/server/channelOpenMethods"}}
{{- range $channel := .BoundChannels}}
    {{- with (deref .).SelectProtoObject $.Protocol }}
        func (s {{ $.Type | goUsage }}) Open{{ $channel | goIDUpper }}{{$.Protocol | goIDUpper}}(
            ctx {{goQual "context.Context"}},
            {{with .ParametersType}}params {{ . | goUsage }},{{end}}
        ) (*{{ .Type | goUsage }}, error) {
            return {{goPkg .Type}}Open{{ $channel | goIDUpper }}{{$.Protocol | goIDUpper}}(
                ctx,{{if .ParametersType}}params,{{end}} s,
            )
        }
    {{- end}}
{{- end}}
{{- end}}

{{define "code/proto/server/operationOpenMethods"}}
{{- range $operation := .BoundOperations}}
    {{- with (deref .).SelectProtoObject $.Protocol }}
        func (s {{ $.Type | goUsage }}) Open{{ $operation | goIDUpper }}{{$.Protocol | goIDUpper}}(
            ctx {{goQual "context.Context"}},
            {{with $operation.Channel.ParametersType}}params {{ . | goUsage }},{{end}}
        ) (*{{ .Type | goUsage }}, error) {
            return {{goPkg .Type}}Open{{ . | goIDUpper }}{{$.Protocol | goIDUpper}}(
                ctx,{{if $operation.Channel.ParametersType}}params,{{end}} s,
            )
        }
    {{- end}}
{{- end}}
{{- end}}

{{define "code/proto/server/commonMethods" }}
func (s {{ .Type | goUsage }}) Name() string {
    return "{{ . | goIDUpper }}"
}

func (s {{ .Type | goUsage }}) Producer() {{goQualR .Protocol "Producer"}} {
    return s.producer
}

func (s {{ .Type | goUsage }}) Consumer() {{goQualR .Protocol "Consumer"}} {
    return s.consumer
}

{{- if .BindingsProtocols | has .Protocol}}
func (s {{.Type | goUsage}}) Bindings() {{goQualR .Protocol "ServerBindings"}} {
    return {{.BindingsType | goUsage}}{}.{{.Protocol | goIDUpper}}()
}
{{- end}}

{{- end}}