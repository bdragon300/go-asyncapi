{{- /* dot == render.ProtoChannel */}}
{{define "code/proto/kafka/channel/newFunction/block1"}}
    res.topic = res.address.String()
    {{- if .BindingsProtocols | has .Protocol}}
        bindings := {{.BindingsType | goUsage}}{}.{{.Protocol | goIDUpper}}()
        if bindings.Topic != "" {
            res.topic = bindings.Topic
        }
    {{- end}}
{{- end}}
{{define "code/proto/kafka/channel/publishMethods/block1"}}
    envelope.SetTopic(c.Topic())
{{- end}}

{{- with once .}}
    {{template "code/proto/channel/newFunction" .}}
    {{template "code/proto/channel/openFunction" .}}

    type {{. | goIDUpper}}{{.Protocol | goIDUpper}} struct {
        address    {{goQualR "ParamString"}}
        {{if .IsPublisher}}publisher  {{goQualR .Protocol "Publisher"}}{{end}}
        {{if .IsSubscriber}}subscriber {{goQualR .Protocol "Subscriber"}}{{end}}
        topic string
    }

    func (c {{. | goIDUpper}}{{.Protocol | goIDUpper}}) Topic() string {
        return c.topic
    }

    {{template "code/proto/channel/commonMethods" .}}
    {{if .IsPublisher}}{{template "code/proto/channel/publishMethods" .}}{{end}}
    {{if .IsSubscriber}}{{template "code/proto/channel/subscribeMethods" .}}{{end}}
    {{template "code/proto/channel/serverInterface" .}}
{{- end}}
