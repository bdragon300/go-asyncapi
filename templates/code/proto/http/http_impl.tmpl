{{- /* dot == render.Server */}}

{{define "code/proto/http/server/impl/net/http/connectFunction"}}
func Connect{{ . | goIDUpper }}Bidi(ctx {{goQual "context.Context"}}, url *{{goQual "net/url.URL"}}) (*{{ . | goIDUpper }}Closable, error) {
    var bindings *{{goQualR .Protocol "ServerBindings"}}
    {{- if .BindingsProtocols | has .Protocol}}
        bindings = {{goQualR "ToPtr"}}({{.BindingsType | goUsage}}{}.{{.Protocol | goIDUpper}}())
    {{- end}}
    producer := {{with impl .Protocol}}{{goPkg .}}{{end}}NewProducer(url, bindings)
    consumer := {{with impl .Protocol}}{{goPkg .}}{{end}}NewConsumer(bindings)
    return &{{ . | goIDUpper }}Closable{
        {{. | goIDUpper}}{producer: producer, consumer: consumer},
    }, nil
}
{{- end}}

{{define "code/proto/http/server/impl/net/http/connectProducerFunction"}}
func Connect{{ . | goIDUpper }}Producer(ctx {{goQual "context.Context"}}, url *{{goQual "net/url.URL"}}) (*{{ . | goIDUpper }}Closable, error) {
    var bindings *{{goQualR .Protocol "ServerBindings"}}
    {{- if .BindingsProtocols | has .Protocol}}
        bindings = {{goQualR "ToPtr"}}({{.BindingsType | goUsage}}{}.{{.Protocol | goIDUpper}}())
    {{- end}}
    producer := {{with impl .Protocol}}{{goPkg .}}{{end}}NewProducer(url, bindings)
    return &{{ . | goIDUpper }}Closable{
        {{. | goIDUpper}}{producer: producer},
    }, nil
}
{{- end}}

{{define "code/proto/http/server/impl/net/http/connectConsumerFunction"}}
func Connect{{ . | goIDUpper }}Consumer(ctx {{goQual "context.Context"}}, url *{{goQual "net/url.URL"}}) (*{{ . | goIDUpper }}Closable, error) {
    var bindings *{{goQualR .Protocol "ServerBindings"}}
    {{- if .BindingsProtocols | has .Protocol}}
        bindings = {{goQualR "ToPtr"}}({{.BindingsType | goUsage}}{}.{{.Protocol | goIDUpper}}())
    {{- end}}
    consumer := {{with impl .Protocol}}{{goPkg .}}{{end}}NewConsumer(bindings)
    return &{{ . | goIDUpper }}Closable{
        {{. | goIDUpper}}{consumer: consumer},
    }, nil
}
{{- end}}