{{- /* dot == render.ProtoOperation */}}

{{define "operation/proto/newFunction"}}
func New{{ . | goid }}{{.Protocol | goid}}(
    {{ with .Channel.ParametersType}}params {{ . | gousage}},{{end}}
    {{ if .IsPublisher}}publisher {{goqualrun .Protocol "Publisher"}},{{end}}
    {{ if .IsSubscriber}}subscriber {{goqualrun .Protocol "Subscriber"}},{{end}}
) *{{.Type| gousage}} {
    res := {{.Type | gousage}}{
        Channel: {{gopkg .ProtoChannel.Type}}New{{.ProtoChannel | goid}}{{.Protocol | goid}}(
            {{- with .Channel.ParametersType}}params,{{end}}
            {{- if .ProtoChannel.IsPublisher}}{{- if .IsPublisher}}publisher{{else}}nil{{end}},{{end}}
            {{- if .ProtoChannel.IsSubscriber}}{{- if .IsSubscriber}}subscriber{{else}}nil{{end}},{{end}}
        ),
    }
    return &res
}
{{- end}}

{{define "operation/proto/openFunction"}}
func Open{{ . | goid }}{{.Protocol | goid}}(
    ctx {{goqual "context.Context"}},
    {{ with .Channel.ParametersType}}params {{. | gousage}},{{end}}
    server {{. | goid }}Server{{.Protocol | goid}},
) (*{{.Type | gousage}}, error) {
    {{- if .Channel.BindingsProtocols | has .Protocol}}
        chBindings := {{.Channel.BindingsType | gousage}}{}.{{.Protocol | goid}}()
    {{- end }}
    {{- if .BindingsProtocols | has .Protocol}}
        opBindings := {{.BindingsType | gousage}}{}.{{.Protocol | goid}}()
    {{- end }}

    {{- if or .IsPublisher .IsSubscriber}}
        address, err := {{with .Channel.SelectProtoObject .Protocol}}{{gopkg .Type}}{{end}}{{.Channel | goid}}Address({{if .Channel.ParametersType}}params{{end}}).Expand()
        if err != nil {
            return nil, err
        }
    {{- end}}
    {{- if .IsPublisher}}
        var publisher {{goqualrun .Protocol "Publisher"}}
        producer := server.Producer()
        if producer != nil {
            publisher, err = producer.Publisher(ctx, address, {{if .Channel.BindingsProtocols | has .Protocol}}&chBindings{{else}}nil{{end}}, {{if .BindingsProtocols | has .Protocol}}&opBindings{{else}}nil{{end}})
            if err != nil {
                return nil, err
            }
        }
    {{- end}}
    {{- if .IsSubscriber}}
        var subscriber {{goqualrun .Protocol "Subscriber"}}
        consumer := server.Consumer()
        if consumer != nil {
            subscriber, err = consumer.Subscriber(ctx, address, {{if .Channel.BindingsProtocols | has .Protocol}}&chBindings{{else}}nil{{end}}, {{if .BindingsProtocols | has .Protocol}}&opBindings{{else}}nil{{end}})
            if err != nil {
                return nil, err
            }
        }
    {{- end}}

    res := &{{.Type | gousage}}{
        Channel: {{gopkg .ProtoChannel.Type}}New{{.ProtoChannel | goid}}{{.Protocol | goid}}(
            {{- with .Channel.ParametersType}}params,{{end}}
            {{- if .ProtoChannel.IsPublisher}}{{- if .IsPublisher}}publisher{{else}}nil{{end}},{{end}}
            {{- if .ProtoChannel.IsSubscriber}}{{- if .IsSubscriber}}subscriber{{else}}nil{{end}},{{end}}
        ),
    }
    return res, nil
}
{{- end}}

{{define "operation/proto/commonMethods"}}
{{- if .BindingsProtocols | has .Protocol}}
func (c {{.Type | gousage}}) Bindings() {{goqualrun .Protocol "OperationBindings"}} {
    return {{.BindingsType | gousage}}{}.{{.Protocol | goid}}()
}
{{- end}}

func (o {{ .Type | gousage }}) Close() error {
    return o.Channel.Close()
}
{{- end}}

{{define "operation/proto/publishMethods"}}
type {{ . | goid }}EnvelopeMarshaler{{.Protocol | goid}} interface {
    Marshal{{. | goid}}{{.Protocol | goid}}(envelope {{goqualrun .Protocol "EnvelopeWriter"}}) error
}

{{- range .BoundMessages}}
    {{- if not (visible .) }}{{continue}}{{end}}
    func (o {{ $.Type | gousage }}) Seal{{. | goid}}(
        envelope {{goqualrun $.Protocol "EnvelopeWriter"}},
        message {{ $ | goid }}EnvelopeMarshaler{{$.Protocol | goid}},
    ) error {
        if err := message.Marshal{{$ | goid}}{{$.Protocol | goid}}(envelope); err != nil {
            return err
        }
        {{ with trytmpl (print "operation/" $.Protocol "/publishMethods/block1") .}}{{.}}{{end}}
        {{- if (deref .).BindingsProtocols | has $.Protocol }}
            envelope.SetBindings({{(deref .).BindingsType | gousage}}{}.{{$.Protocol | goid}}())
        {{- end}}
        return nil
    }

    func (o {{ $.Type | gousage }}) Publish{{. | goid}}(
        ctx {{goqual "context.Context"}},
        {{if not (impl $.Protocol)}}envelope {{goqualrun $.Protocol "EnvelopeWriter"}},{{end}}
        message {{ $ | goid }}EnvelopeMarshaler{{$.Protocol | goid}},
    ) error {
        {{- with impl $.Protocol}}
            envelope := {{gopkg .}}NewEnvelopeOut()
        {{- end}}
        if err := o.Seal{{. | goid}}(envelope, message); err != nil {
            return err
        }
        return o.Channel.Publish(ctx, envelope)
    }
{{- end}}
{{- end}}


{{define "operation/proto/subscribeMethods"}}
type {{ . | goid }}EnvelopeUnmarshaler{{.Protocol | goid}} interface {
    Unmarshal{{. | goid}}{{.Protocol | goid}}(envelope {{goqualrun .Protocol "EnvelopeReader"}}) error
}

{{- range .BoundMessages}}
    {{- if not (visible .) }}{{continue}}{{end}}
    func (o {{ $.Type | gousage }}) Unseal{{. | goid}}(
        envelope {{goqualrun $.Protocol "EnvelopeReader"}},
        message {{ $ | goid }}EnvelopeUnmarshaler{{$.Protocol | goid}},
    ) error {
        return message.Unmarshal{{$ | goid}}{{$.Protocol | goid}}(envelope)
    }

    func (o {{ $.Type | gousage }}) Subscribe{{. | goid}}(
        ctx {{goqual "context.Context"}},
        cb func(message {{ gopkg (deref .).InType}}{{ goid .}}IncomingMessage),
    ) (err error) {
        subCtx, cancel := {{goqual "context.WithCancelCause"}}(ctx)
        defer cancel(nil)

        return o.Channel.Subscribe(subCtx, func(envelope {{goqualrun $.Protocol "EnvelopeReader"}}) {
            message := new({{ (deref .).InType | gousage }})
            if err2 := o.Unseal{{. | goid}}(envelope, message); err2 != nil {
                err = {{goqual "fmt.Errorf"}}("open message envelope: %w", err2)
                cancel(err)
                return
            }
            cb(message)
        })
    }
{{- end}}
{{- end}}

{{define "operation/proto/serverInterface"}}
type {{ . | goid }}Server{{.Protocol | goid}} interface {
    Open{{. | goid}}{{.Protocol | goid}}(ctx {{goqual "context.Context"}}, {{with .Channel.ParametersType}}params {{ . | gousage }}{{end}}) (*{{ .Type | gousage }}, error)
    {{if .IsPublisher}}Producer() {{goqualrun .Protocol "Producer"}}{{end}}
    {{if .IsSubscriber}}Consumer() {{goqualrun .Protocol "Consumer"}}{{end}}
}
{{- end}}
