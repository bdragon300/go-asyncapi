{{- /* dot == render.ProtoOperation */}}

{{define "code/proto/operation/newFunction"}}
func New{{ . | goIDUpper }}{{.Protocol | goIDUpper}}(
    {{ with .Channel.ParametersType}}params {{ . | goUsage}},{{end}}
    {{ if .IsPublisher}}publisher {{goQualR .Protocol "Publisher"}},{{end}}
    {{ if .IsSubscriber}}subscriber {{goQualR .Protocol "Subscriber"}},{{end}}
) *{{. | goIDUpper}}{{.Protocol | goIDUpper}} {
    res := {{. | goIDUpper}}{{.Protocol | goIDUpper}}{
        Channel: {{goPkg .ProtoChannel}}New{{.ProtoChannel | goIDUpper}}{{.Protocol | goIDUpper}}(
            {{- with .Channel.ParametersType}}params,{{end}}
            {{- if .ProtoChannel.IsPublisher}}{{- if .IsPublisher}}publisher{{else}}nil{{end}},{{end}}
            {{- if .ProtoChannel.IsSubscriber}}{{- if .IsSubscriber}}subscriber{{else}}nil{{end}},{{end}}
        ),
    }
    return &res
}
{{- end}}

{{define "code/proto/operation/openFunction"}}
func Open{{ . | goIDUpper }}{{.Protocol | goIDUpper}}(
    ctx {{goQual "context.Context"}},
    {{ with .Channel.ParametersType}}params {{. | goUsage}},{{end}}
    server {{. | goIDUpper }}Server{{.Protocol | goIDUpper}},
) (*{{. | goIDUpper}}{{.Protocol | goIDUpper}}, error) {
    {{- if .Channel.BindingsProtocols | has .Protocol}}
        chBindings := {{.Channel.BindingsType | goUsage}}{}.{{.Protocol | goIDUpper}}()
    {{- end }}
    {{- if .BindingsProtocols | has .Protocol}}
        opBindings := {{.BindingsType | goUsage}}{}.{{.Protocol | goIDUpper}}()
    {{- end }}

    {{- if or .IsPublisher .IsSubscriber}}
        address, err := {{with .Channel.SelectProtoObject .Protocol}}{{goPkg .}}{{end}}{{.Channel | goIDUpper}}Address({{if .Channel.ParametersType}}params{{end}}).Expand()
        if err != nil {
            return nil, err
        }
    {{- end}}
    {{- if .IsPublisher}}
        var publisher {{goQualR .Protocol "Publisher"}}
        producer := server.Producer()
        if producer != nil {
            publisher, err = producer.Publisher(ctx, address, {{if .Channel.BindingsProtocols | has .Protocol}}&chBindings{{else}}nil{{end}}, {{if .BindingsProtocols | has .Protocol}}&opBindings{{else}}nil{{end}})
            if err != nil {
                return nil, err
            }
        }
    {{- end}}
    {{- if .IsSubscriber}}
        var subscriber {{goQualR .Protocol "Subscriber"}}
        consumer := server.Consumer()
        if consumer != nil {
            subscriber, err = consumer.Subscriber(ctx, address, {{if .Channel.BindingsProtocols | has .Protocol}}&chBindings{{else}}nil{{end}}, {{if .BindingsProtocols | has .Protocol}}&opBindings{{else}}nil{{end}})
            if err != nil {
                return nil, err
            }
        }
    {{- end}}

    res := &{{. | goIDUpper}}{{.Protocol | goIDUpper}}{
        Channel: {{goPkg .ProtoChannel}}New{{.ProtoChannel | goIDUpper}}{{.Protocol | goIDUpper}}(
            {{- with .Channel.ParametersType}}params,{{end}}
            {{- if .ProtoChannel.IsPublisher}}{{- if .IsPublisher}}publisher{{else}}nil{{end}},{{end}}
            {{- if .ProtoChannel.IsSubscriber}}{{- if .IsSubscriber}}subscriber{{else}}nil{{end}},{{end}}
        ),
    }
    return res, nil
}
{{- end}}

{{define "code/proto/operation/commonMethods"}}
{{- if .BindingsProtocols | has .Protocol}}
func (c {{. | goIDUpper}}{{.Protocol | goIDUpper}}) Bindings() {{goQualR .Protocol "OperationBindings"}} {
    return {{.BindingsType | goUsage}}{}.{{.Protocol | goIDUpper}}()
}
{{- end}}

func (o {{. | goIDUpper}}{{.Protocol | goIDUpper}}) Close() error {
    return o.Channel.Close()
}

{{/*{{if and .OperationReply .AllowTwoWayCode}}*/}}
{{/*    func (c {{. | goIDUpper}}{{.Protocol | goIDUpper}}) Reply({{with .OperationReply.Channel}}channel {{. | goIDUpper}}{{.Protocol | goIDUpper}}{{end}}) *{{. | goIDUpper}}{{.Protocol | goIDUpper}}Reply {*/}}
{{/*        return &{{. | goIDUpper}}{{.Protocol | goIDUpper}}Reply{Channel: {{with .OperationReply.Channel}}channel {{goUsage .}}{{else}}c.Channel{{end}} }*/}}
{{/*    }*/}}
{{/*{{- end}}*/}}
{{- end}}

{{define "code/proto/operation/commonPublish"}}
type {{ . | goIDUpper }}EnvelopeMarshaler{{.Protocol | goIDUpper}} interface {
    Marshal{{. | goIDUpper}}{{.Protocol | goIDUpper}}(envelope {{goQualR .Protocol "EnvelopeWriter"}}) error
}
{{- end}}

{{define "code/proto/operation/commonSubscribe"}}
type {{ . | goIDUpper }}EnvelopeUnmarshaler{{.Protocol | goIDUpper}} interface {
    Unmarshal{{. | goIDUpper}}{{.Protocol | goIDUpper}}(envelope {{goQualR .Protocol "EnvelopeReader"}}) error
}
{{- end}}


{{define "code/proto/operation/publishMethods"}}
{{- range .BoundMessages}}
    {{- if not (isVisible .) }}{{continue}}{{end}}
    func (o {{$ | goIDUpper}}{{$.Protocol | goIDUpper}}) Seal{{. | goIDUpper}}(
        envelope {{goQualR $.Protocol "EnvelopeWriter"}},
        message {{ $ | goIDUpper }}EnvelopeMarshaler{{$.Protocol | goIDUpper}},
    ) error {
        if err := message.Marshal{{$ | goIDUpper}}{{$.Protocol | goIDUpper}}(envelope); err != nil {
            return err
        }
        {{ with tryTmpl (print "code/proto/" $.Protocol "/operation/publishMethods/block1") .}}{{.}}{{end}}
        {{- if (deref .).BindingsProtocols | has $.Protocol }}
            envelope.SetBindings({{(deref .).BindingsType | goUsage}}{}.{{$.Protocol | goIDUpper}}())
        {{- end}}
        return nil
    }

    func (o {{$ | goIDUpper}}{{$.Protocol | goIDUpper}}) Publish{{. | goIDUpper}}(
        ctx {{goQual "context.Context"}},
        {{if not (impl $.Protocol)}}envelope {{goQualR $.Protocol "EnvelopeWriter"}},{{end}}
        message {{ $ | goIDUpper }}EnvelopeMarshaler{{$.Protocol | goIDUpper}},
    ) error {
        {{- with impl $.Protocol}}
            envelope := {{goPkg .}}NewEnvelopeOut()
        {{- end}}
        if err := o.Seal{{. | goIDUpper}}(envelope, message); err != nil {
            return err
        }
        {{ with tryTmpl (print "code/proto/" $.Protocol "/operation/publishMethods/block2") .}}{{.}}{{end}}
        return o.Channel.Publish(ctx, envelope)
    }
{{- end}}
{{- end}}


{{define "code/proto/operation/subscribeMethods"}}
{{- range .BoundMessages}}
    {{- if not (isVisible .) }}{{continue}}{{end}}
    func (o {{$ | goIDUpper}}{{$.Protocol | goIDUpper}}) Unseal{{. | goIDUpper}}(
        envelope {{goQualR $.Protocol "EnvelopeReader"}},
        message {{ $ | goIDUpper }}EnvelopeUnmarshaler{{$.Protocol | goIDUpper}},
    ) error {
        return message.Unmarshal{{$ | goIDUpper}}{{$.Protocol | goIDUpper}}(envelope)
    }

    func (o {{$ | goIDUpper}}{{$.Protocol | goIDUpper}}) Subscribe{{. | goIDUpper}}(
        ctx {{goQual "context.Context"}},
        cb func(message {{ goPkg (deref .).InType}}{{ goIDUpper .}}Receiver),
    ) (err error) {
        subCtx, cancel := {{goQual "context.WithCancelCause"}}(ctx)
        defer cancel(nil)

        return o.Channel.Subscribe(subCtx, func(envelope {{goQualR $.Protocol "EnvelopeReader"}}) {
            message := new({{ (deref .).InType | goUsage }})
            if err2 := o.Unseal{{. | goIDUpper}}(envelope, message); err2 != nil {
                err = {{goQual "fmt.Errorf"}}("open message envelope: %w", err2)
                cancel(err)
                return
            }
            cb(message)
        })
    }
{{- end}}
{{- end}}

{{define "code/proto/operation/operationReply/publishMethods"}}
{{- range .BoundReplyMessages }}
    {{- if not (isVisible .) }}{{continue}}{{end}}
    func (o {{$ | goIDUpper}}{{$.Protocol | goIDUpper}}Reply) Seal{{. | goIDUpper}}(
        envelope {{goQualR $.Protocol "EnvelopeWriter"}},
        message {{ $ | goIDUpper }}EnvelopeMarshaler{{$.Protocol | goIDUpper}},
    ) error {
        if err := message.Marshal{{$ | goIDUpper}}{{$.Protocol | goIDUpper}}(envelope); err != nil {
            return err
        }
        {{ with tryTmpl (print "code/proto/" $.Protocol "/operation/publishMethods/block1") .}}{{.}}{{end}}
        {{- if (deref .).BindingsProtocols | has $.Protocol }}
            envelope.SetBindings({{(deref .).BindingsType | goUsage}}{}.{{$.Protocol | goIDUpper}}())
        {{- end}}
        return nil
    }

    func (o {{$ | goIDUpper}}{{$.Protocol | goIDUpper}}Reply) Reply{{. | goIDUpper}}(
        ctx {{goQual "context.Context"}},
        {{if not (impl $.Protocol)}}envelope {{goQualR $.Protocol "EnvelopeWriter"}},{{end}}
        {{if $.OperationReply.OperationReplyAddress}}
            {{- $ctx := dict "SourceVarName" "o" "RuntimeExpression" $.OperationReply.OperationReplyAddress.BaseRuntimeExpression "TargetType" .OutType}}
            message interface{ {{ $ | goIDUpper }}EnvelopeMarshaler{{$.Protocol | goIDUpper}}, SetReplyAddress{{ $ | goIDUpper }}(a {{template "code/runtimeExpression/varType" $ctx}}) },
            replyAddress {{template "code/runtimeExpression/varType" $ctx}},
        {{- else }}
            message {{ $ | goIDUpper }}EnvelopeMarshaler{{$.Protocol | goIDUpper}},
        {{- end}}
    ) error {
        {{- with impl $.Protocol}}
            envelope := {{goPkg .}}NewEnvelopeOut()
        {{- end}}
        {{- if $.OperationReply.OperationReplyAddress}}
            message.SetReplyAddress{{$.OperationReply | goIDUpper}}(replyAddress)
        {{- end}}
        if err := o.Seal{{. | goIDUpper}}(envelope, message); err != nil {
            return err
        }
        {{ with tryTmpl (print "code/proto/" $.Protocol "/operation/publishMethods/block2") .}}{{.}}{{end}}
        return o.Channel.Publish(ctx, envelope)
    }
{{- end}}
{{- end}}

{{define "code/proto/operation/operationReply/subscribeMethods"}}
{{- range .BoundReplyMessages }}
    {{- if not (isVisible .) }}{{continue}}{{end}}
    func (o {{$ | goIDUpper}}{{$.Protocol | goIDUpper}}Reply) Unseal{{. | goIDUpper}}(
        envelope {{goQualR $.Protocol "EnvelopeReader"}},
        message {{ $ | goIDUpper }}EnvelopeUnmarshaler{{$.Protocol | goIDUpper}},
    ) error {
        return message.Unmarshal{{$ | goIDUpper}}{{$.Protocol | goIDUpper}}(envelope)
    }

    func (o {{$ | goIDUpper}}{{$.Protocol | goIDUpper}}Reply) Subscribe{{. | goIDUpper}}(
        ctx {{goQual "context.Context"}},
        cb func(message {{ goPkg (deref .).InType}}{{ goIDUpper .}}Receiver),
    ) (err error) {
        subCtx, cancel := {{goQual "context.WithCancelCause"}}(ctx)
        defer cancel(nil)

        return o.Channel.Subscribe(subCtx, func(envelope {{goQualR $.Protocol "EnvelopeReader"}}) {
            message := new({{ (deref .).InType | goUsage }})
            if err2 := o.Unseal{{. | goIDUpper}}(envelope, message); err2 != nil {
                err = {{goQual "fmt.Errorf"}}("open message envelope: %w", err2)
                cancel(err)
                return
            }
            cb(message)
        })
    }
{{- end}}
{{- end}}

{{define "code/proto/operation/serverInterface"}}
type {{ . | goIDUpper }}Server{{.Protocol | goIDUpper}} interface {
    Open{{. | goIDUpper}}{{.Protocol | goIDUpper}}(ctx {{goQual "context.Context"}}, {{with .Channel.ParametersType}}params {{ . | goUsage }}{{end}}) (*{{. | goIDUpper}}{{.Protocol | goIDUpper}}, error)
    {{if .IsPublisher}}Producer() {{goQualR .Protocol "Producer"}}{{end}}
    {{if .IsSubscriber}}Consumer() {{goQualR .Protocol "Consumer"}}{{end}}
}
{{- end}}
