{{- /* dot == render.ProtoServer */}}

{{define "code/proto/udp/server/impl/net/connectFunction"}}
func Connect{{ .Server | goIDUpper }}Bidi(ctx {{goQual "context.Context"}}, url *{{goQual "net/url.URL"}}, localHost string) (*{{ .Server | goIDUpper }}Closable, error) {
    client := {{with impl .Protocol}}{{goPkg .}}{{end}}NewClient(localHost, url.Host, url.Scheme)
    consumer, producer := client, client
    return &{{ .Server | goIDUpper }}Closable{
        {{ .Type | goUsage }}{producer: producer, consumer: consumer},
    }, nil
}
{{- end}}

{{define "code/proto/udp/server/impl/net/connectProducerFunction"}}
func Connect{{ .Server | goIDUpper }}Producer(ctx {{goQual "context.Context"}}, url *{{goQual "net/url.URL"}}, localHost string) (*{{ .Server | goIDUpper }}Closable, error) {
    producer := {{with impl .Protocol}}{{goPkg .}}{{end}}NewClient(localHost, url.Host, url.Scheme)
    return &{{ .Server | goIDUpper }}Closable{
        {{ .Type | goUsage }}{producer: producer},
    }, nil
}
{{- end}}

{{define "code/proto/udp/server/impl/net/connectConsumerFunction"}}
func Connect{{ .Server | goIDUpper }}Consumer(ctx {{goQual "context.Context"}}, url *{{goQual "net/url.URL"}}, localHost string) (*{{ .Server | goIDUpper }}Closable, error) {
    consumer := {{with impl .Protocol}}{{goPkg .}}{{end}}NewClient(localHost, url.Host, url.Scheme)
    return &{{ .Server | goIDUpper }}Closable{
        {{ .Type | goUsage }}{consumer: consumer},
    }, nil
}
{{- end}}
