{{- /* dot == render.ProtoMessage */}}

{{define "code/proto/message/commonMethods"}}
{{- end}}

{{define "code/proto/message/marshalMethods"}}
{{- range .BoundChannels}}
    {{- if and (isVisible .) (deref .).IsPublisher}}
        func (m *{{ $.OutType | goIDUpper }}) Marshal{{. | goIDUpper}}{{$.Protocol | goIDUpper}}(envelope {{goQualR $.Protocol "EnvelopeWriter"}}) error {
            return m.MarshalEnvelope{{$.Protocol | goIDUpper}}(envelope)
        }
    {{- end}}
{{- end}}

{{- range .BoundOperations}}
    {{- if and (isVisible .) (deref .).IsPublisher}}
        func (m *{{ $.OutType | goIDUpper }}) Marshal{{. | goIDUpper}}{{$.Protocol | goIDUpper}}(envelope {{goQualR $.Protocol "EnvelopeWriter"}}) error {
            return m.MarshalEnvelope{{$.Protocol | goIDUpper}}(envelope)
        }
    {{- end}}
{{- end}}

func (m *{{ .OutType | goIDUpper }}) MarshalEnvelope{{ .Protocol | goIDUpper }}(envelope {{goQualR .Protocol "EnvelopeWriter"}}) error {
    {{- template "code/proto/message/encoder" .}}
    envelope.SetContentType({{.EffectiveContentType | goLit}})
    {{- if .HeadersTypePromise}}
        {{- /* Headers schema is defined */}}
        envelope.SetHeaders({
        {{- range .HeadersType.Fields}}
            {{ .Name | goLit}}: m.Headers.{{.Name}},
        {{- end}}
        })
    {{- else}}
        envelope.SetHeaders({{goQualR "Headers"}}(m.Headers))
    {{- end}}
    return nil
}

{{- if .BindingsProtocols | has .Protocol}}
    func (c {{.OutType | goUsage}}) Bindings{{.Protocol | goIDUpper}}() {{goQualR .Protocol "MessageBindings"}} {
        return {{.BindingsType | goUsage}}{}.{{.Protocol | goIDUpper}}()
    }
{{- end}}
{{- end}}

{{define "code/proto/message/unmarshalMethods"}}
{{- range .BoundChannels}}
    {{- if and (isVisible .) (deref .).IsSubscriber}}
        func (m *{{ $.InType | goIDUpper }}) Unmarshal{{. | goIDUpper}}{{$.Protocol | goIDUpper}}(envelope {{goQualR $.Protocol "EnvelopeReader"}}) error {
            return m.UnmarshalEnvelope{{$.Protocol | goIDUpper}}(envelope)
        }
    {{- end}}
{{- end}}

{{- range .BoundOperations}}
    {{- if and (isVisible .) (deref .).IsSubscriber}}
        func (m *{{ $.InType | goIDUpper }}) Unmarshal{{. | goIDUpper}}{{$.Protocol |  goIDUpper}}(envelope {{goQualR $.Protocol "EnvelopeReader"}}) error {
            return m.UnmarshalEnvelope{{$.Protocol | goIDUpper}}(envelope)
        }
    {{- end}}
{{- end}}

func (m *{{ .InType | goIDUpper }}) UnmarshalEnvelope{{ .Protocol | goIDUpper }}(envelope {{goQualR .Protocol "EnvelopeReader"}}) error {
    {{- template "code/proto/message/decoder" .}}
    {{- if .HeadersTypePromise }}
        {{- /* Headers schema is defined */}}
        {{- if gt (len .HeadersType.Fields) 0}}
            headers := envelope.Headers()
            {{- range .HeadersType.Fields}}
                if v, ok := headers[{{.Name | goLit}}]; ok {
                    m.headers.{{.Name}} = v.({{.Type| goUsage}})
                }
            {{- end}}
        {{- end}}
    {{- else}}
        m.headers = {{.HeadersTypeDefault | goUsage}}(envelope.Headers())
    {{- end}}
    return nil
}

{{- if .BindingsProtocols | has .Protocol}}
    func (c {{.InType | goUsage}}) Bindings{{.Protocol | goIDUpper}}() {{goQualR .Protocol "MessageBindings"}} {
        return {{.BindingsType | goUsage}}{}.{{.Protocol | goIDUpper}}()
    }
{{- end}}
{{- end}}

{{define "code/proto/message/encoder"}}
{{- with tryTmpl (print "code/proto/mime/messageEncoder/" .EffectiveContentType) .}}
    {{.}}
{{- else}}
    {{template "code/proto/mime/messageEncoder/default" .}}
{{- end}}
{{- end}}

{{define "code/proto/message/decoder"}}
{{- with tryTmpl (print "code/proto/mime/messageDecoder/" .EffectiveContentType) .}}
    {{.}}
{{- else}}
    {{template "code/proto/mime/messageDecoder/default" .}}
{{- end}}
{{- end}}