{{- /* dot == render.ProtoMessage */}}

{{define "code/proto/message/commonMethods"}}
{{- end}}

{{define "code/proto/message/marshalMethods"}}
{{- range .BoundChannels}}
    {{- if and (isVisible .) .IsPublisher}}
        func (m *{{ $.OutType | goIDUpper }}) Marshal{{. | goIDUpper}}{{$.Protocol | goIDUpper}}(envelope {{goQualR $.Protocol "EnvelopeWriter"}}) error {
            return m.MarshalEnvelope{{$.Protocol | goIDUpper}}(envelope)
        }
    {{- end}}
{{- end}}

{{- range $op := .BoundAllPubOperations}}
    {{- if isVisible .}}
        func (m *{{ $.OutType | goIDUpper }}) Marshal{{$op | goIDUpper}}{{$.Protocol | goIDUpper}}(envelope {{goQualR $.Protocol "EnvelopeWriter"}}) error {
            return m.MarshalEnvelope{{$.Protocol | goIDUpper}}(envelope)
        }
        {{with $opr := $op.OperationReply}}
            {{- if and (isVisible $opr) $opr.OperationReplyAddress}}
                {{- $ctx := dict "SourceVarName" "m" "RuntimeExpression" $opr.OperationReplyAddress.BaseRuntimeExpression "TargetType" $.OutType}}
                func (m *{{ $.OutType | goIDUpper }}) SetReplyAddress{{$opr | goIDUpper}}(value {{template "code/runtimeExpression/varType" $ctx}}) {
                    {{template "code/runtimeExpression/setterBody" $ctx}}
                }
            {{- end}}
        {{- end}}
    {{- end}}
{{- end}}

func (m *{{ .OutType | goIDUpper }}) MarshalEnvelope{{ .Protocol | goIDUpper }}(envelope {{goQualR .Protocol "EnvelopeWriter"}}) error {
    if err := m.Marshal{{ .Protocol | goIDUpper }}(envelope); err != nil {
        return err
    }
    envelope.SetContentType({{.EffectiveContentType | goLit}})
    {{- if .HeadersTypePromise}}
        {{- /* Headers schema is defined */}}
        envelope.SetHeaders({
        {{- range .HeadersType.Fields}}
            {{ .Name | goLit}}: m.Headers.{{.Name}},
        {{- end}}
        })
    {{- else}}
        envelope.SetHeaders({{goQualR "Headers"}}(m.Headers))
    {{- end}}
    return nil
}

func (m *{{ .OutType | goIDUpper }}) Marshal{{ .Protocol | goIDUpper }}(w {{goQual "io.Writer"}}) error {
    {{- template "code/proto/message/encoder" .}}
    return nil
}

{{- if .BindingsProtocols | has .Protocol}}
    func (c {{.OutType | goUsage}}) Bindings{{.Protocol | goIDUpper}}() {{goQualR .Protocol "MessageBindings"}} {
        return {{.BindingsType | goUsage}}{}.{{.Protocol | goIDUpper}}()
    }
{{- end}}
{{- end}}

{{define "code/proto/message/unmarshalMethods"}}
{{- range .BoundChannels}}
    {{- if and (isVisible .) .IsSubscriber}}
        func (m *{{ $.InType | goIDUpper }}) Unmarshal{{. | goIDUpper}}{{$.Protocol | goIDUpper}}(envelope {{goQualR $.Protocol "EnvelopeReader"}}) error {
            return m.UnmarshalEnvelope{{$.Protocol | goIDUpper}}(envelope)
        }
    {{- end}}
{{- end}}

{{- range $op := .BoundAllSubOperations}}
    {{- if isVisible $op}}
        func (m *{{ $.InType | goIDUpper }}) Unmarshal{{$op | goIDUpper}}{{$.Protocol |  goIDUpper}}(envelope {{goQualR $.Protocol "EnvelopeReader"}}) error {
            return m.UnmarshalEnvelope{{$.Protocol | goIDUpper}}(envelope)
        }

        {{with $opr := $op.OperationReply}}
            {{- if and (isVisible $opr) $opr.OperationReplyAddress}}
                {{- $ctx := dict "SourceVarName" "m" "RuntimeExpression" $opr.OperationReplyAddress.BaseRuntimeExpression "TargetType" $.InType}}
                func (m *{{ $.InType | goIDUpper }}) ReplyAddress{{$opr | goIDUpper}}() (value {{template "code/runtimeExpression/varType" $ctx}}, error) {
                    {{template "code/runtimeExpression/getterBody" $ctx}}
                    return
                }
            {{- end}}
        {{- end}}
    {{- end}}
{{- end}}

func (m *{{ .InType | goIDUpper }}) UnmarshalEnvelope{{ .Protocol | goIDUpper }}(envelope {{goQualR .Protocol "EnvelopeReader"}}) error {
    if err := m.Unmarshal{{ .Protocol | goIDUpper }}(envelope); err != nil {
        return err
    }
    {{- if .HeadersTypePromise }}
        {{- /* Headers schema is defined */}}
        {{- if gt (len .HeadersType.Fields) 0}}
            headers := envelope.Headers()
            {{- range .HeadersType.Fields}}
                if v, ok := headers[{{.Name | goLit}}]; ok {
                    m.headers.{{.Name}} = v.({{.Type| goUsage}})
                }
            {{- end}}
        {{- end}}
    {{- else}}
        m.headers = {{.HeadersTypeDefault | goUsage}}(envelope.Headers())
    {{- end}}
    return nil
}

func (m *{{ .InType | goIDUpper }}) Unmarshal{{ .Protocol | goIDUpper }}(r {{goQual "io.Reader"}}) error {
    {{- template "code/proto/message/decoder" .}}
    return nil
}

{{- if .BindingsProtocols | has .Protocol}}
    func (c {{.InType | goUsage}}) Bindings{{.Protocol | goIDUpper}}() {{goQualR .Protocol "MessageBindings"}} {
        return {{.BindingsType | goUsage}}{}.{{.Protocol | goIDUpper}}()
    }
{{- end}}
{{- end}}

{{define "code/proto/message/encoder"}}
{{- with tryTmpl (print "code/proto/mime/messageEncoder/" .EffectiveContentType) .}}
    {{.}}
{{- else}}
    {{/*TODO: print log warning about using the default encoder*/}}
    {{template "code/proto/mime/messageEncoder/default" .}}
{{- end}}
{{- end}}

{{define "code/proto/message/decoder"}}
{{- with tryTmpl (print "code/proto/mime/messageDecoder/" .EffectiveContentType) .}}
    {{.}}
{{- else}}
    {{/*TODO: print log warning about using the default decoder*/}}
    {{template "code/proto/mime/messageDecoder/default" .}}
{{- end}}
{{- end}}