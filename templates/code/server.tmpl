{{- /* dot == render.Renderable: Ref -> render.Server or render.Server */}}
{{- with $server := deref .}}

{{- if .ProtocolVersion}}
const {{$ | goid}}ProtocolVersion = {{.ProtocolVersion | golit}}
{{- end}}

func {{$ | goid}}URL(
{{- range .Variables.Entries}}
    {{- .Value | goidorig}} string,
{{- end }}) (*{{goqual "net/url.URL"}}, error) {
    {{- if gt .Variables.Len 0}}
        {{- range .Variables.Entries}}
            {{- if .Value.Default}}
                if {{.Value | goidorig}} == "" {
                    {{.Value | goidorig}} = {{.Value.Default | golit}}
                }
            {{- end}}
        {{- end}}
        paramMap := map[string]string{
            {{- range .Variables.Entries}}
                {{.Key | golit}}: {{.Value | goidorig}},
            {{- end}}
        }

        res := &{{goqual "net/url.URL"}}{Scheme: {{.Protocol | golit}}}
        {{- if .Host}}
            h, err := {{goqualrun "ParamString"}}{Expr: {{.Host | golit}}, Parameters: paramMap}.Expand()
            if err != nil {
                return nil, {{goqual "fmt.Errorf"}}("expand host: %w", err)
            }
            res.Host = h
        {{- end}}
        {{- if .Pathname}}
            p, err := {{goqualrun "ParamString"}}{Expr: {{.Pathname | golit}}, Parameters: paramMap}.Expand()
            if err != nil {
                return nil, {{goqual "fmt.Errorf"}}.Errorf("expand pathname: %w", err)
            }
            res.Path = p
        {{- end}}

        return res, nil
    {{- else}}
        return &{{goqual "net/url.URL"}}{Scheme: {{.Protocol | golit}}, Host: {{.Host | golit}}, Path: {{.Pathname | golit}}}, nil
    {{- end}}
}

{{- if and .BindingsType (ndefined .BindingsType)}}
    {{- .BindingsType | godef}}
    {{- range $proto := .BindingsProtocols}}
        {{- $bindingsValue := $server.ProtoBindingsValue $proto}}
        func (c {{ $server.BindingsType | gousage }}) {{ $proto | goid }}() {{$bindingsValue.Type | gousage}} {
            b := {{$bindingsValue | gousage}}
            {{- with $server.Bindings}}
                {{- $jvals := .JSONValues.GetOrEmpty $proto}}
                {{- range $jval := $jvals.Entries}}
                    {{$jval.Key | toCamelCase }} := {{$jval.Value | golit}}
                    _ = {{goqual "encoding/json.Unmarshal"}}([]byte({{$jval.Key | toCamelCase }}), &b.{{$jval.Key}})
                {{- end}}
            {{- end}}
            return b
        }
    {{- end}}
{{- end}}

{{- end}}