{{define "operation/proto/newFunction"}}
func New{{ .Channel | goid }}{{.Protocol | capitalize | goid}}{{. | goid}}(
    {{- with .Channel.ParametersType}}params {{ . | gousage}},{{end}}
    {{- if .IsPublisher}}publisher {{goqualrun .Protocol "Publisher"}},{{end}}
    {{- if .IsSubscriber}}subscriber {{goqualrun .Protocol "Subscriber"}},{{end}}
) *{{.Type| gousage}} {
    res := {{.Type | gousage}}{
        name: {{.Channel | goid}}Name({{if .ParametersType}}params{{end}}),
        {{- if .IsPublisher}}publisher: publisher,{{end}}
        {{- if .IsSubscriber}}subscriber: subscriber,{{end}}
    }
    {{- with trytmpl (print "operation/" .Protocol "/newFunction/block1") .}}
        {{.}}
    {{- end}}
    return &res
}
{{- end}}

{{define "operation/proto/openFunction"}}
func Open{{ .Channel | goid }}{{.Protocol | capitalize | goid}}{{. | goid}}(
    ctx {{goqual "context.Context"}},
    {{ with .Channel.ParametersType}}params {{. | gousage}},{{end}}
    {{ if .IsPublisher}}producer {{goqualrun .Protocol "Producer"}},{{end}}
    {{ if .IsSubscriber}}consumer {{goqualrun .Protocol "Consumer"}},{{end}}
) (ch *{{.Type | gousage}}, err error) {
    name := {{.Channel | goid}}Name({{if .Channel.ParametersType}}params{{end}})
    {{- if .Channel.BindingsProtocols | has .Protocol}}
        bindings := {{.Channel.BindingsType | gousage}}{}.{{.Protocol | capitalize | goid}}()
    {{- end }}

    {{- if .IsPublisher}}
        var publisher {{goqualrun .Protocol "Publisher"}}
        if producer != nil {
            if publisher, err = producer.Publisher(ctx, name.String(), {{if .Channel.BindingsProtocols | has .Protocol}}&bindings{{else}}nil{{end}}); err != nil {
                return nil, err
            }
        }
    {{- end}}
    {{- if .IsSubscriber}}
        var subscriber {{goqualrun .Protocol "Subscriber"}}
        if consumer != nil {
            if subscriber, err = consumer.Subscriber(ctx, name.String(), {{if .Channel.BindingsProtocols | has .Protocol}}&bindings{{else}}nil{{end}}); err != nil {
                return nil, err
            }
        }
    {{- end}}

    return New{{ .Channel | goid }}{{.Protocol | capitalize | goid}}{{. | goid}}(
        {{ if .Channel.ParametersType}}params, {{end}}
        {{ if .IsPublisher}}publisher,{{end}}
        {{ if .IsSubscriber}}subscriber,{{end}}
    ), nil
}
{{- end}}

{{define "operation/proto/publishMethods"}}
type {{ . | goid }}OperationEnvelopeMarshaler{{.Protocol | capitalize | goid}} interface {
    MarshalOperation{{. | goid}}{{.Protocol | capitalize | goid}}(envelope {{goqualrun .Protocol "EnvelopeWriter"}}) error
}

{{- range .BoundMessages}}
    {{- if visible . }}
        func (o {{ $.Type | gousage }}) SealEnvelope{{. | goid}}(
            envelope {{goqualrun $.Protocol "EnvelopeWriter"}},
            message {{ $ | goid }}OperationEnvelopeMarshaler{{$.Protocol | capitalize | goid}},
        ) error {
            if err := message.MarshalOperation{{$ | goid}}{{$.Protocol | capitalize | goid}}(envelope); err != nil {
                return err
            }
            {{ with trytmpl (print "operation/" $.Protocol "/publishMethods/block1") .}}{{.}}{{end}}
            {{- if .BindingsProtocols | has $.Protocol }}
                envelope.SetBindings({{.BindingsType | gousage}}{}.{{$.Protocol | capitalize | goid}}())
            {{- end}}
            return nil
        }

        func (o {{ $.Type | gousage }}) Send{{. | goid}}(
            ctx {{goqual "context.Context"}},
            envelope {{goqualrun $.Protocol "EnvelopeWriter"}},
            message {{ $ | goid }}OperationEnvelopeMarshaler{{$.Protocol | capitalize | goid}},
        ) error {
            if err := o.SealEnvelope{{. | goid}}(envelope, message); err != nil {
                return err
            }
            return o.Publish(ctx, envelope)
        }
    {{- end}}
{{- end}}
{{- end}}


{{define "operation/proto/subscribeMethods"}}
type {{ . | goid }}OperationEnvelopeUnmarshaler{{.Protocol | capitalize | goid}} interface {
    UnmarshalOperation{{. | goid}}{{.Protocol | capitalize | goid}}(envelope {{goqualrun .Protocol "EnvelopeReader"}}) error
}

{{- range .BoundMessages}}
    {{- if visible . }}
        func (o {{ $.Type | gousage }}) OpenEnvelope{{. | goid}}(
            envelope {{goqualrun $.Protocol "EnvelopeReader"}},
            message {{ $ | goid }}OperationEnvelopeUnmarshaler{{$.Protocol | capitalize | goid}},
        ) error {
            return message.UnmarshalOperation{{$ | goid}}{{$.Protocol | capitalize | goid}}(envelope)
        }

        func (o {{ $.Type | gousage }}) Subscribe{{. | goid}}(
            ctx {{goqual "context.Context"}},
            cb func(message {{ .InType | goptr | gousage }}) error,
        ) error {
            return o.Subscribe(ctx, func(envelope {{goqualrun $.Protocol "EnvelopeReader"}}) error {
                message := new({{ .InType | gousage }})
                if err := o.OpenEnvelope(envelope, message); err != nil {
                    return err
                }
                return cb(message)
            })
        }
    {{- end}}
{{- end}}
{{- end}}

{{define "operation/proto/serverInterface"}}
type {{ .Type | goid }}Server interface {
    OpenOperation{{.Type | goid}}(ctx {{goqual "context.Context"}}, {{with .Channel.ParametersType}}params {{ . | gousage }}{{end}}) (*{{ .Type | gousage }}, error)
    {{if .IsPublisher}}Producer() {{goqualrun .Protocol "Producer"}}{{end}}
    {{if .IsSubscriber}}Consumer() {{goqualrun .Protocol "Consumer"}}{{end}}
}
{{- end}}
