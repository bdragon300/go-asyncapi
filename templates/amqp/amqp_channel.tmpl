{{- def .Type}}
{{define "channel/amqp/newFunction/block1"}}
    {{- if and .BindingsType (.BindingsProtocols | has .Protocol)}}
        bindings := {{ .BindingsType | gousage }}{}.{{.Protocol | capitalize | goid}}()
        switch bindings.ChannelType {
        case {{goqualrun .Protocol "ChannelTypeQueue"}}:
            res.queue = res.name.String()
        default:
            res.routingKey = res.name.String()
        }
        if bindings.ExchangeConfiguration.Name != nil {
            res.exchange = *bindings.ExchangeConfiguration.Name
        }
        if bindings.QueueConfiguration.Name != "" {
            res.queue = bindings.QueueConfiguration.Name
        }
    {{- end}}
{{- end}}
{{define "channel/amqp/publishMethods/block1"}}
    envelope.SetRoutingKey(c.RoutingKey())
{{- end}}

{{template "channel/proto/newFunction" .}}

{{template "channel/proto/openFunction" .}}

{{- if ndefined .Type}}
{{ .Type | godef }}

{{template "channel/proto/commonMethods" .}}

func (c {{ .Type | gousage }}) Exchange() string {
    return c.exchange
}

func (c {{ .Type | gousage }}) Queue() string {
    return c.queue
}

func (c {{ .Type | gousage }}) RoutingKey() string {
    return c.routingKey
}


{{if .IsPublisher}}{{template "channel/proto/publishMethods" .}}{{end}}

{{if .IsSubscriber}}{{template "channel/proto/subscribeMethods" .}}{{end}}

type {{ .Type | goid }}Server interface {
    Open{{.Type | goid}}(ctx {{goqual "context.Context"}}, {{if .ParametersType}}params {{ .ParametersType | gousage }}{{end}}) (*{{ .Type | gousage }}, error)
    {{if .IsPublisher}}Producer() {{goqualrun .Protocol "Producer"}}{{end}}
    {{if .IsSubscriber}}Consumer() {{goqualrun .Protocol "Consumer"}}{{end}}
}
{{- end}}
