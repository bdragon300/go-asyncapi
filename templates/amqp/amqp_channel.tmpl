{{- localobj .Type}}
{{template "proto/channel/openFunction" .}}

func New{{ .Channel | goid }}(
    {{ if .ParametersType}}params {{ .ParametersType | gousage }},{{end}}
    {{ if .IsPublisher}}publisher {{qualrun .ProtoName "Publisher"}},{{end}}
    {{ if .IsSubscriber}}subscriber {{qualrun .ProtoName "Subscriber"}},{{end}}
) *{{ .Type | gousage }} {
    res := {{ .Type | gousage }}{
        name: {{ .Channel | goid }}Name({{if .ParametersType}}params{{end}}),
        {{if .IsPublisher}}publisher: publisher,{{end}}
        {{if .IsSubscriber}}subscriber: subscriber,{{end}}
    }
    {{- if .BindingsType}}
        bindings := {{ .BindingsType | gousage }}{}.{{.ProtoName | capitalize | goid}}()
        switch bindings.ChannelType {
        case {{qualrun .ProtoName "ChannelTypeQueue"}}:
            res.queue = res.name.String()
        default:
            res.routingKey = res.name.String()
        }
        if bindings.ExchangeConfiguration.Name != nil {
            res.exchange = *bindings.ExchangeConfiguration.Name
        }
        if bindings.QueueConfiguration.Name != "" {
            res.queue = bindings.QueueConfiguration.Name
        }
    {{- end}}

    return &res
}

{{- if gondefined .Type}}
{{ .Type | godef }}

{{template "proto/channel/commonMethods" .}}

func (c {{ .Type | gousage }}) Exchange() string {
    return c.exchange
}

func (c {{ .Type | gousage }}) Queue() string {
    return c.queue
}

func (c {{ .Type | gousage }}) RoutingKey() string {
    return c.routingKey
}

{{- if .IsPublisher}}
    {{template "proto/channel/outputMethods" .}}
    func (c {{ .Type | gousage }}) SealEnvelope(envelope {{qualrun .ProtoName "EnvelopeWriter"}}, message {{if .PublisherMessageTypePromise}}{{goptr .PublisherMessageTypePromise.T.OutType}}{{else}}any{{end}}) error {
        envelope.ResetPayload()
        {{- if .PublisherMessageTypePromise}}
            {{- /* Message is set for Channel in spec */ -}}
            if err := message.Marshal{{.ProtoName | capitalize | goid}}Envelope(envelope); err != nil {
                return err
            }
        {{- else}}
            {{- /* No Message set for Channel in spec */ -}}
            enc := {{qual "encoding/json.NewEncoder"}}(envelope)
            if err := enc.Encode(message); err != nil {
                return err
            }
        {{- end}}
        envelope.SetRoutingKey(c.RoutingKey())
        {{- if and .PublisherMessageTypePromise (.PublisherMessageTypePromise.T.HasProtoBindings .ProtoName)}}
            envelope.SetBindings({{ .PublisherMessageTypePromise.T.BindingsType | gousage }}){}.{{.ProtoName | capitalize | goid}}()
        {{- end}}
        return nil
    }
{{- end}}

{{if .IsSubscriber}}{{template "proto/channel/subscribeMethods" .}}{{end}}

type {{ .Type | goid }}Server interface {
    Open{{.Type | goid}}(ctx {{qual "context.Context"}}, {{if .ParametersType}}params {{ .ParametersType | gousage }}{{end}}) (*{{ .Type | gousage }}, error)
    {{if .IsPublisher}}Producer() {{qualrun .ProtoName "Producer"}}{{end}}
    {{if .IsSubscriber}}Consumer() {{qualrun .ProtoName "Consumer"}}{{end}}
}
{{- end}}
