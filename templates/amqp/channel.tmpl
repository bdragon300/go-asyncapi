type {{(print .GolangNameProto "Server") | lowerCamelize}} interface {
    Open{{.GolangNameProto}}(ctx {{qual "context.Context"}}, {{if .ParametersStruct}}params {{.ParametersStruct.U}}{{end}}) (*{{.Struct.U}}, error)
    {{if .Publisher}}Producer() {{qualr .ProtoName "Producer"}}{{end}}
    {{if .Subscriber}}Consumer() {{qualr .ProtoName "Consumer"}}{{end}}
}

func New{{.Struct.Name}}(
    {{if .ParametersStruct}}params {{.ParametersStruct.U}},{{end}}
    {{if .Publisher}}publisher {{qualr .ProtoName "Publisher"}},{{end}}
    {{if .Subscriber}}subscriber {{qualr .ProtoName "Subscriber"}},{{end}}
) *{{.Struct.U}} {
    res := {{.Struct.U}}{
        name: {{.GolangName}}Name({{if .ParametersStruct}}params{{end}}),
        {{if .Publisher}}publisher: publisher,{{end}}
        {{if .Subscriber}}subscriber: subscriber,{{end}}
    }
    {{if .BindingsStruct}}
        bindings := {{.BindingsStruct.U}}{}.{{.ProtoName | title}}()
        switch bindings.ChannelType {
        case {{qualr .ProtoName "ChannelTypeQueue"}}:
            res.queue = res.name.String()
        default:
            res.routingKey = res.name.String()
        }
        if bindings.ExchangeConfiguration.Name != nil {
            res.exchange = *bindings.ExchangeConfiguration.Name
        }
        if bindings.QueueConfiguration.Name != "" {
            res.queue = bindings.QueueConfiguration.Name
        }
    {{end}}

    return &res
}

{{template "proto/channel/openFunction" .}}

{{.Struct.D}}

{{template "proto/channel/commonMethods" .}}

func (c {{.Struct.U}}) Exchange() string {
    return c.exchange
}

func (c {{.Struct.U}}) Queue() string {
    return c.queue
}

func (c {{.Struct.U}}) RoutingKey() string {
    return c.routingKey
}

{{if .Publisher}}
    {{template "proto/channel/outputMethods" .}}

    {{$pubMessageType := ptr .FallbackMessageType}}
    {{if .PubMessagePromise }}
        {{$pubMessageType = ptr .PubMessagePromise.T.OutStruct}}
    {{end}}

    func (c {{.Struct.U}}) SealEnvelope(envelope {{qualr .ProtoName "EnvelopeWriter"}}, message {{$pubMessageType.U}}) error {
        envelope.ResetPayload()
        {{if .PubMessagePromise /*Message is set for Channel in spec*/ }}
            if err := message.Marshal{{.ProtoName | title}}Envelope(envelope); err != nil {
                return err
            }
        {{else /*No Message set for Channel in spec*/}}
            enc := {{qual "encoding/json.NewEncoder"}}(envelope)
            if err := enc.Encode(message); err != nil {
                return err
            }
        {{end}}
        envelope.SetRoutingKey(c.RoutingKey())
        {{if and .PubMessagePromise (.PubMessagePromise.T.HasProtoBindings .ProtoName)}}
            envelope.SetBindings(.PubMessagePromise.T.BindingsStruct.U){}.{{.ProtoName | title}}()
        {{end}}
        return nil
    }
{{end}}

{{if .Subscriber}}{{template "proto/channel/subscribeMethods" .}}{{end}}