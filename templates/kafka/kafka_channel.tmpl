{{- def .Type}}
{{define "channel/kafka/newFunction/block1"}}
    res.topic = res.name.String()
    {{- if .BindingsType}}
        bindings := {{.BindingsType | gousage}}{}.{{.Protocol | capitalize | goid}}()
        if bindings.Topic != "" {
            res.topic = bindings.Topic
        }
    {{- end}}
{{- end}}
{{define "channel/kafka/publishMethods/block1"}}
    envelope.SetTopic(c.topic)
{{- end}}

{{template "channel/proto/newFunction" .}}

{{template "channel/proto/openFunction" .}}

{{- if ndefined .Type}}
{{.Type | godef}}

{{template "channel/proto/commonMethods" .}}

func (c {{.Type| gousage}}) Topic() string {
    return c.topic
}

{{if .IsPublisher}}{{template "channel/proto/publishMethods" .}}{{end}}

{{if .IsSubscriber}}{{template "channel/proto/subscribeMethods" .}}{{end}}

type {{ .Type | goid }}Server interface {
    Open{{.Type | goid}}(ctx {{goqual "context.Context"}}, {{if .ParametersType}}params {{.ParametersType| gousage}}{{end}}) (*{{.Type| gousage}}, error)
    {{if .IsPublisher}}Producer() {{goqualrun .Protocol "Producer"}}{{end}}
    {{if .IsSubscriber}}Consumer() {{goqualrun .Protocol "Consumer"}}{{end}}
}
{{- end}}
