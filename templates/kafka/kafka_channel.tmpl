{{- localobj .Type}}
{{template "proto/channel/openFunction" .}}

func New{{ .Channel | goid }}{{.Protocol | capitalize | goid}}(
    {{ if .ParametersType}}params {{.ParametersType| gousage}},{{end}}
    {{ if .IsPublisher}}publisher {{qualrun .Protocol "Publisher"}},{{end}}
    {{ if .IsSubscriber}}subscriber {{qualrun .Protocol "Subscriber"}},{{end}}
) *{{.Type | gousage}} {
    res := {{.Type | gousage}}{
        name: {{.Channel | goid}}Name({{if .ParametersType}}params{{end}}),
        {{ if .IsPublisher}}publisher: publisher,{{end}}
        {{ if .IsSubscriber}}subscriber: subscriber,{{end}}
    }
    res.topic = res.name.String()
    {{- if .BindingsType}}
        bindings := {{.BindingsType | gousage}}{}.{{.Protocol | capitalize | goid}}()
        if bindings.Topic != "" {
            res.topic = bindings.Topic
        }
    {{- end}}

    return &res
}

{{- if gondefined .Type}}
{{.Type | godef}}

{{template "proto/channel/commonMethods" .}}

func (c {{.Type| gousage}}) Topic() string {
    return c.topic
}

{{- if .IsPublisher}}
    {{template "proto/channel/outputMethods" .}}
    func (c {{.Type| gousage}}) SealEnvelope(envelope {{qualrun .Protocol "EnvelopeWriter"}}, message {{if .PublisherMessageTypePromise}}{{goptr .PublisherMessageTypePromise.T.OutType}}{{else}}any{{end}}) error {
        envelope.ResetPayload()
        {{- if .PublisherMessageTypePromise}}
            {{- /* Message is set for Channel in spec */}}
            if err := message.MarshalEnvelope{{.Protocol | capitalize | goid}}(envelope); err != nil {
                return err
            }
        {{- else}}
            {{- /* No Message set for Channel in spec */}}
            enc := {{qual "encoding/json.NewEncoder"}}(envelope)
            if err := enc.Encode(message); err != nil {
                return err
            }
        {{- end}}
        envelope.SetTopic(c.topic)
        {{- if and .PublisherMessageTypePromise (.PublisherMessageTypePromise.T.BindingsProtocols | has .Protocol)}}
            envelope.SetBindings({{.PublisherMessageTypePromise.T.BindingsType | gousage }}{}.{{.Protocol | capitalize | goid}}())
        {{- end}}
        return nil
    }
{{- end}}

{{if .IsSubscriber}}{{template "proto/channel/subscribeMethods" .}}{{end}}

type {{ .Type | goid }}Server interface {
    Open{{.Type | goid}}(ctx {{qual "context.Context"}}, {{if .ParametersType}}params {{.ParametersType| gousage}}{{end}}) (*{{.Type| gousage}}, error)
    {{if .IsPublisher}}Producer() {{qualrun .Protocol "Producer"}}{{end}}
    {{if .IsSubscriber}}Consumer() {{qualrun .Protocol "Consumer"}}{{end}}
}
{{- end}}
