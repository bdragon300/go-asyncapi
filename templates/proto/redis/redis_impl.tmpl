{{- /* dot == render.ProtoServer */}}

{{define "server/redis/impl/github.com/redis/go-redis/connectFunction"}}
func Connect{{ .Server | goid }}Bidi(ctx {{goqual "context.Context"}}, url *{{goqual "net/url.URL"}}) (*{{ .Server | goid }}Closable, error) {
    client, err := {{with impl .Protocol}}{{gopkg .}}{{end}}NewClient(url.String())
    if err != nil {
        return nil, err
    }
    producer, consumer := client, client
    return &{{ .Server | goid }}Closable{
        {{ .Type | gousage }}{producer: producer, consumer: consumer},
    }, nil
}
{{- end}}

{{define "server/redis/impl/github.com/redis/go-redis/connectProducerFunction"}}
func Connect{{ .Server | goid }}Producer(ctx {{goqual "context.Context"}}, url *{{goqual "net/url.URL"}}) (*{{ .Server | goid }}Closable, error) {
    producer, err := {{with impl .Protocol}}{{gopkg .}}{{end}}NewClient(url.String())
    if err != nil {
        return nil, err
    }
    return &{{ .Server | goid }}Closable{
        {{ .Type | gousage }}{producer: producer},
    }, nil
}
{{- end}}

{{define "server/redis/impl/github.com/redis/go-redis/connectConsumerFunction"}}
func Connect{{ .Server | goid }}Consumer(ctx {{goqual "context.Context"}}, url *{{goqual "net/url.URL"}}) (*{{ .Server | goid }}Closable, error) {
    consumer, err := {{with impl .Protocol}}{{gopkg .}}{{end}}NewClient(url.String())
    if err != nil {
        return nil, err
    }
    return &{{ .Server | goid }}Closable{
        {{ .Type | gousage }}{consumer: consumer},
    }, nil
}
{{- end}}